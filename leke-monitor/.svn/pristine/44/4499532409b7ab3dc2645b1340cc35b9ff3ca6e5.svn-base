package cn.strong.leke.monitor.mongo.online.service.impl;

import static com.mongodb.client.model.Accumulators.addToSet;
import static com.mongodb.client.model.Accumulators.max;
import static com.mongodb.client.model.Aggregates.group;
import static com.mongodb.client.model.Aggregates.match;
import static com.mongodb.client.model.Aggregates.project;
import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.gte;
import static com.mongodb.client.model.Filters.lte;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.ne;
import static com.mongodb.client.model.Filters.in;
import static com.mongodb.client.model.Projections.computed;
import static com.mongodb.client.model.Projections.excludeId;
import static com.mongodb.client.model.Projections.fields;
import static com.mongodb.client.model.Projections.include;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.springframework.stereotype.Repository;
import org.springframework.util.Assert;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import cn.strong.leke.monitor.mongo.course.model.query.SchoolActiveUserStat;
import cn.strong.leke.monitor.mongo.online.model.DayActiveUser;
import cn.strong.leke.monitor.mongo.online.model.query.ActiveUserQuery;
import cn.strong.leke.monitor.mongo.online.service.IDayActiveUserDao;

@Repository
public class DayActiveUserDao implements IDayActiveUserDao{
	@Resource(name = "monitorDb")
	private MongoDatabase db;
	private MongoCollection<DayActiveUser> coll;  

	@PostConstruct
	public void init() {
		Assert.notNull(db, "DB should not be null");
		coll = db.getCollection("dayactive.user", DayActiveUser.class);
	}

	@Override
	public void saveDayActiveUser(DayActiveUser deviceOnlineUserSta) {
		String id = new ObjectId().toHexString();
		deviceOnlineUserSta.setId(id);
		this.coll.insertOne(deviceOnlineUserSta);
	}

	@Override
	public List<SchoolActiveUserStat> getActiveUser(ActiveUserQuery query,List<Long> schoolIds) {
		Bson filter = and(in("schoolId", schoolIds));
		if (query.getOs().equals("IOS") && query.getD() == 4 ) {
			filter = and(in("schoolId", schoolIds),eq("model", "iPhone"));
		}else if (query.getOs().equals("Android") && query.getD() == 4 ) {
			filter = and(in("schoolId", schoolIds),ne("model", "iPhone"));
		}
		List<Bson> pipeline = Arrays.asList(
				match(query.toBSON()),
				match(filter),
				group("$schoolId", addToSet("activeUsers", "$userId"),max("schoolName", "$schoolName"),
						max("validUsers", "$validUser"),max("schoolId", "$schoolId")),
				project(fields(excludeId(),//computed("schoolId", "$_id"),
						include("activeUsers",  "validUsers","schoolName","schoolId"))));
		return coll.aggregate(pipeline, SchoolActiveUserStat.class).into(new ArrayList<>());
	}

	@Override
	public Set<Integer> getStaDay(int fromDate, int endDate) {
		Bson filter = and(gte("ts", fromDate), lte("ts", endDate));
		return coll.find(filter, Document.class).projection(include("ts")).map(doc -> {
			
			return doc.getInteger("ts");
			
		}).into(new TreeSet<>(new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				
				return o2 -o1;
			}
		}));
	}

	@Override
	public Set<Integer> getStaWeek(int startWeek, int endWeek) {
		
		Bson filter = and(lte("week", endWeek),gte("week", startWeek));
		return coll.find(filter, Document.class).projection(include("week")).map(doc -> {
			return doc.getInteger("week");
		}).into(new TreeSet<>(new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				
				return o2 -o1;
			}
		}));
	}

	@Override
	public Set<Integer> getStaMonth(int startMonth, int endMonth) {
		Bson filter = and(lte("month", endMonth),gte("month", startMonth));
		return coll.find(filter, Document.class).projection(include("month")).map(doc -> {
			return doc.getInteger("month");
		}).into(new TreeSet<>(new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				
				return o2 -o1;
			}
		}));
	}

	@Override
	public List<SchoolActiveUserStat> getClassActiveUser(ActiveUserQuery query) {
		Bson filter = and(eq("schoolName",query.getSchoolName()),ne("classId", null));
		List<Bson> pipeline = Arrays.asList(
				match(filter),
				match(query.toBSON()),
				group("$classId",  addToSet("activeUsers", "$userId"),max("schoolName", "$schoolName"),
						max("validUsers", "$headCount"),max("className", "$className"),
						max("gradeName", "$gradeName")),
				project(fields(excludeId(),computed("schoolId", "$_id"),
						include("activeUsers",  "validUsers","schoolName","className","gradeName"))));
		return coll.aggregate(pipeline,SchoolActiveUserStat.class).into(new ArrayList<>());
	}
	

}
