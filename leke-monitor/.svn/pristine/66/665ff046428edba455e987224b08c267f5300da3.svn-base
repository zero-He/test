/**
 * 
 */
package cn.strong.leke.monitor.core.service.online.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.common.utils.DateUtils;
import cn.strong.leke.context.base.UserBaseContext;
import cn.strong.leke.context.user.cst.RoleCst;
import cn.strong.leke.core.cas.TicketEncrypt;
import cn.strong.leke.framework.exceptions.ValidateException;
import cn.strong.leke.framework.exceptions.Validation;
import cn.strong.leke.model.user.RoleSchool;
import cn.strong.leke.model.user.UserBase;
import cn.strong.leke.monitor.core.dao.mybatis.IUserActiveStatisDao;
import cn.strong.leke.monitor.core.model.DeviceHeartbeat;
import cn.strong.leke.monitor.core.service.online.IDeviceOnlineUserService;
import cn.strong.leke.monitor.core.service.online.IspFinder;
import cn.strong.leke.monitor.core.utils.SessionHelper;
import cn.strong.leke.monitor.mongo.online.model.DayActiveUser;
import cn.strong.leke.monitor.mongo.online.model.DeviceOnlineUser;
import cn.strong.leke.monitor.mongo.online.service.IDayActiveUserDao;
import cn.strong.leke.monitor.mongo.online.service.IDeviceOnlineUserDao;
import cn.strong.leke.monitor.util.StatUtils;

/**
 * @author liulongbiao
 *
 */
@Service
public class DeviceOnlineUserService implements IDeviceOnlineUserService {
	private static final Logger LOG = LoggerFactory.getLogger(DeviceOnlineUserService.class);
	@Resource
	private IspFinder ispFinder;
	@Resource(name = "monitorExecutor")
	private ExecutorService monitorExecutor;
	@Resource
	private IDeviceOnlineUserDao deviceOnlineUserDao;
	@Resource
	private IUserActiveStatisDao userActiveStatisDao;
	@Resource
	private IDayActiveUserDao dayActiveUserDao;

	@Override
	public void saveHeartbeat(DeviceHeartbeat hb) {
		CompletableFuture.runAsync(() -> {
			DeviceOnlineUser user = toDeviceOnlineUser(hb);
			deviceOnlineUserDao.save(user);
		}, monitorExecutor).whenComplete((t, ex) -> {
			if (ex != null) {
				LOG.error("保存设备心跳失败", ex);
			}
		});
	}

	private DeviceOnlineUser toDeviceOnlineUser(DeviceHeartbeat hb) {
		if (hb == null || hb.getTicket() == null || hb.getD() == null) {
			throw new ValidateException("心跳信息不完整");
		}
		String userId = TicketEncrypt.decode(hb.getTicket());
		UserBase user = UserBaseContext.getUserBaseByUserId(Long.parseLong(userId));
		Validation.notNull(user, "无法查找到用户信息");
		DeviceOnlineUser result = new DeviceOnlineUser();
		result.setTs(new Date());
		result.setD(hb.getD());
		result.setUserId(user.getId());
		RoleSchool rs = CollectionUtils.getFirst(user.getRoleSchoolList());
		if (rs != null) {
			result.setSchoolId(rs.getSchoolId());
		}
		result.setModel(hb.getModel());
		result.setOs(hb.getOs());
		String ip = hb.getIp();
		result.setIp(ip);
		result.setIsp(ispFinder.getIsp(ip));

		result.setRoleId(SessionHelper.getCurrentRoleId(userId, hb.getD()));

		return result;
	}

	/**
	 * 保存每日活跃用户
	 */
	@Override
	public void saveDayActiveUser() {
		List<DeviceOnlineUser> activeUser = deviceOnlineUserDao.getActiveUser();

		Map<Long, Integer> stuSchoolUsers = new HashMap<>();
		Map<Long, Integer> teaSchoolUsers = new HashMap<>();
		Map<Long, Integer> parSchoolUsers = new HashMap<>();
		int allStuUsers = userActiveStatisDao.allValidUserCount(RoleCst.STUDENT);
		int allTeaUsers = userActiveStatisDao.allValidUserCount(RoleCst.TEACHER);
		int allParUsers = userActiveStatisDao.allValidUserCount(RoleCst.PARENT);

		Date yestoday = DateUtils.addDays(new Date(), -1);
		for (DeviceOnlineUser item : activeUser) {
			Long roleId = item.getRoleId();
			if (roleId == null) {
				continue;
			} else if (RoleCst.STUDENT.equals(roleId)) {
				updateStuActiveUsers(yestoday, item, stuSchoolUsers, allStuUsers);
			} else if (RoleCst.TEACHER.equals(roleId)) {
				updateTeaActiveUsers(yestoday, item, teaSchoolUsers, allTeaUsers);
			} else if (RoleCst.PARENT.equals(roleId)) {
				updateParActiveUsers(yestoday, item, parSchoolUsers, allParUsers);
			}
		}
	}

	private void updateStuActiveUsers(Date date, DeviceOnlineUser item,
			Map<Long, Integer> cache, int allStuUsers) {
		Long userId = item.getUserId();
		List<Map<String, Object>> studentClassInfo = userActiveStatisDao.getStudentClassInfo(userId);
		if (studentClassInfo.isEmpty()) {
			for (Map<String, Object> map : studentClassInfo) {
				DayActiveUser dayActiveUser = createOnlineUserInfo(map, item, date);
				dayActiveUser.setHeadCount((Integer) map.get("headCount"));
				dayActiveUser.setValidUser(countStuActiveUserBySchool(cache, (Long) map.get("schoolId")));
				dayActiveUser.setAllValidUser(allStuUsers);
				dayActiveUserDao.saveDayActiveUser(dayActiveUser);
			}
		} else {
			DayActiveUser user = userActiveStatisDao.getSchoolNameByUserId(item);
			if (user != null) {
				user.setValidUser(countStuActiveUserBySchool(cache, user.getSchoolId()));
				user.setAllValidUser(allStuUsers);
				user = createGraduateUserInfo(item, date, user);
				dayActiveUserDao.saveDayActiveUser(user);
			}
		}
	}

	private void updateTeaActiveUsers(Date yestoday, DeviceOnlineUser item,
			Map<Long, Integer> teaSchoolUsers, int allTeaUsers) {
		Long userId = item.getUserId();
		List<Map<String, Object>> teacherClassInfo = userActiveStatisDao.getTeacherClassInfo(userId);
		if (teacherClassInfo.isEmpty()) {
			for (Map<String, Object> map : teacherClassInfo) {
				DayActiveUser dayActiveUser = createOnlineUserInfo(map, item, yestoday);
				int headCount = userActiveStatisDao.getTeacherNumByClassId(dayActiveUser.getClassId());
				dayActiveUser.setHeadCount(headCount);
				dayActiveUser.setValidUser(
						countTeaActiveUserBySchool(teaSchoolUsers, (Long) map.get("schoolId")));
				dayActiveUser.setAllValidUser(allTeaUsers);
				dayActiveUserDao.saveDayActiveUser(dayActiveUser);
			}
		} else {
			DayActiveUser user = userActiveStatisDao.getSchoolNameByUserId(item);
			if (user != null) {
				user.setValidUser(countTeaActiveUserBySchool(teaSchoolUsers, user.getSchoolId()));
				user = createGraduateUserInfo(item, yestoday, user);
				user.setAllValidUser(allTeaUsers);
				dayActiveUserDao.saveDayActiveUser(user);
			}
		}
	}

	private void updateParActiveUsers(Date yestoday, DeviceOnlineUser item, Map<Long, Integer> cache,
			int allParUsers) {
		Long userId = item.getUserId();
		List<Map<String, Object>> parentClassInfo = userActiveStatisDao.getParentClassInfo(userId);
		if (parentClassInfo.isEmpty()) {
			for (Map<String, Object> map : parentClassInfo) {
				DayActiveUser dayActiveUser = createOnlineUserInfo(map, item, yestoday);
				int headCount = userActiveStatisDao.getParentNumByClassid(dayActiveUser.getClassId());
				dayActiveUser.setHeadCount(headCount);
				dayActiveUser.setValidUser(countParActiveUserBySchool(cache, (Long) map.get("schoolId")));
				dayActiveUser.setAllValidUser(allParUsers);
				dayActiveUserDao.saveDayActiveUser(dayActiveUser);
			}
		} else {
			List<DayActiveUser> schoolNameByPrId = userActiveStatisDao.getSchoolNameByPrId(userId);
			if (schoolNameByPrId.isEmpty()) {
				for (DayActiveUser user : schoolNameByPrId) {
					user.setValidUser(countParActiveUserBySchool(cache, user.getSchoolId()));
					user = createGraduateUserInfo(item, yestoday, user);
					user.setAllValidUser(allParUsers);
					dayActiveUserDao.saveDayActiveUser(user);
				}
			} else {
				DayActiveUser activeUser2 = userActiveStatisDao.getSchoolNameByUserId(item);
				activeUser2.setValidUser(countParActiveUserBySchool(cache, activeUser2.getSchoolId()));
				activeUser2 = createGraduateUserInfo(item, yestoday, activeUser2);
				activeUser2.setAllValidUser(allParUsers);
				dayActiveUserDao.saveDayActiveUser(activeUser2);
			}
		}
	}

	private int countStuActiveUserBySchool(Map<Long, Integer> cache, Long schoolId) {
		return cache.computeIfAbsent(schoolId, userActiveStatisDao::getSchoolValidStu);
	}

	private int countTeaActiveUserBySchool(Map<Long, Integer> cache, Long schoolId) {
		return cache.computeIfAbsent(schoolId, userActiveStatisDao::getSchoolValidTea);
	}

	private int countParActiveUserBySchool(Map<Long, Integer> cache, Long schoolId) {
		return cache.computeIfAbsent(schoolId, userActiveStatisDao::getSchoolValidPar);
	}

	private static DayActiveUser createOnlineUserInfo(Map<String, Object> map, DeviceOnlineUser deviceOnlineUser,
			Date date) {
		Integer ts = Integer.valueOf(StatUtils.formatDate(date));
		DayActiveUser dayActiveUser = new DayActiveUser();
		dayActiveUser.setClassId((Long) map.get("classId"));
		dayActiveUser.setClassName((String) map.get("className"));
		dayActiveUser.setD(deviceOnlineUser.getD());
		dayActiveUser.setGradeId((Long) map.get("gradeId"));
		dayActiveUser.setGradeName((String) map.get("gradeName"));
		dayActiveUser.setModel(deviceOnlineUser.getModel());
		dayActiveUser.setMonth(Integer.valueOf(StatUtils.getYear(date).toString() + StatUtils.getMonth(date)));
		dayActiveUser.setOs(deviceOnlineUser.getOs());
		dayActiveUser.setRoleId(deviceOnlineUser.getRoleId());
		dayActiveUser.setSchoolId((Long) map.get("schoolId"));
		dayActiveUser.setSchoolName((String) map.get("schoolName"));
		dayActiveUser.setSchoolStageId((Long) map.get("schoolStageId"));
		dayActiveUser.setTs(ts);
		dayActiveUser.setUserId(deviceOnlineUser.getUserId());
		dayActiveUser.setWeek(Integer.valueOf(StatUtils.getYear(date).toString() + StatUtils.getWeek(date)));
		return dayActiveUser;
	}

	private static DayActiveUser createGraduateUserInfo(DeviceOnlineUser deviceOnlineUser, Date date,
			DayActiveUser dayActiveUser) {
		Integer ts = Integer.valueOf(StatUtils.formatDate(date));
		dayActiveUser.setD(deviceOnlineUser.getD());
		dayActiveUser.setModel(deviceOnlineUser.getModel());
		dayActiveUser.setMonth(Integer.valueOf(StatUtils.getYear(date).toString() + StatUtils.getMonth(date)));
		dayActiveUser.setOs(deviceOnlineUser.getOs());
		dayActiveUser.setRoleId(deviceOnlineUser.getRoleId());
		dayActiveUser.setTs(ts);
		dayActiveUser.setUserId(deviceOnlineUser.getUserId());
		dayActiveUser.setWeek(Integer.valueOf(StatUtils.getYear(date).toString() + StatUtils.getWeek(date)));
		return dayActiveUser;
	}

}
