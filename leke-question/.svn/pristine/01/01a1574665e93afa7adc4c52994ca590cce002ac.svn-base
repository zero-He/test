<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.1//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.strong.leke.question.dao.mybatis.MaterialNodeDao">

	<insert id="insertMaterialNode" useGeneratedKeys="true" keyProperty="materialNodeId"
		parameterType="cn.strong.leke.model.question.MaterialNode">
		INSERT INTO que_material_node(
			materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		) VALUES (
			#{materialNodeName}, #{materialNodeCode}, #{nodeType}, #{schoolStageId}, #{gradeId},
			#{subjectId}, #{materialId}, #{knowledgeId}, #{parentId}, #{ord}, #{lft}, #{rgt},
			0, #{createdBy}, now(), #{modifiedBy}, now()
		)
	</insert>
	
	<update id="updateMaterialNode" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		<set>
			<if test="materialNodeName != null and materialNodeName != ''">materialNodeName = #{materialNodeName},</if>
			<if test="materialNodeCode != null and materialNodeCode != ''">materialNodeCode = #{materialNodeCode},</if>
			<if test="nodeType != null">nodeType = #{nodeType},</if>
			<if test="schoolStageId != null">schoolStageId = #{schoolStageId},</if>
			<if test="gradeId != null">gradeId = #{gradeId},</if>
			<if test="subjectId != null">subjectId = #{subjectId},</if>
			<if test="materialId != null">materialId = #{materialId},</if>
			<if test="knowledgeId != null">knowledgeId = #{knowledgeId},</if>
			<if test="ord != null">ord = #{ord},</if>
			<if test="modifiedBy != null">modifiedBy = #{modifiedBy},</if>
			modifiedOn = now()
		</set>
		<where>
			materialNodeId= #{materialNodeId}
		</where>
	</update>
	
	<update id="deleteMaterialNode" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		<set>
			isDeleted = 1,
			<if test="modifiedBy != null">modifiedBy = #{modifiedBy},</if>
			modifiedOn = now()
		</set>
		<where>
			materialNodeId= #{materialNodeId}
		</where>
	</update>
	
	<select id="queryMaterialNodes" parameterType="cn.strong.leke.model.question.MaterialNode"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			<if test="materialNodeId != null">AND materialNodeId = #{materialNodeId}</if>
			<if test="materialNodeName != null and materialNodeName != ''">AND materialNodeName LIKE '%'||#{materialNodeName}||'%'</if>
			<if test="materialNodeCode != null and materialNodeCode != ''">AND materialNodeCode LIKE '%'||#{materialNodeCode}||'%'</if>
			<if test="nodeType != null">AND nodeType = #{nodeType}</if>
			<if test="schoolStageId != null">AND schoolStageId = #{schoolStageId}</if>
			<if test="gradeId != null">AND gradeId = #{gradeId}</if>
			<if test="subjectId != null">AND subjectId = #{subjectId}</if>
			<if test="materialId != null">AND materialId = #{materialId}</if>
			<if test="knowledgeId != null">AND knowledgeId = #{knowledgeId}</if>
			<if test="parentId != null">AND parentId = #{parentId}</if>
			AND isDeleted = 0
		</where>
		ORDER BY parentId ASC, ord ASC, materialNodeId ASC
	</select>
	
	<select id="getMaterialNodeById" parameterType="long"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialNodeId = #{materialNodeId}
			AND isDeleted = 0
		</where>
	</select>
	
	<update id="updateIncLftIndexGteLftVal" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		SET lft = lft + 2
		<where>
			<![CDATA[
				AND lft >= #{lft}
			]]>
			AND materialId = #{materialId}
			AND isDeleted = 0
		</where>
	</update>
	
	<update id="updateIncRgtIndexGteLftVal" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		SET rgt = rgt + 2
		<where>
			<![CDATA[
				AND rgt >= #{lft}
			]]>
			AND materialId = #{materialId}
			AND isDeleted = 0
		</where>
	</update>
	
	<update id="updateDecLftIndexGteLftVal" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		SET lft = lft - 2
		<where>
			<![CDATA[
				AND lft >= #{lft}
			]]>
			AND materialId = #{materialId}
			AND isDeleted = 0
		</where>
	</update>
	
	<update id="updateDecRgtIndexGteLftVal" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		SET rgt = rgt - 2
		<where>
			<![CDATA[
				AND rgt >= #{lft}
			]]>
			AND materialId = #{materialId}
			AND isDeleted = 0
		</where>
	</update>

	<update id="updateMaterialName" parameterType="cn.strong.leke.model.question.Material">
		UPDATE que_material_node
		<set>
			materialNodeName = #{materialName},
			<if test="modifiedBy != null">modifiedBy = #{modifiedBy},</if>
			modifiedOn = now()
		</set>
		<where>
			materialId= #{materialId}
			AND parentId = 0
			AND isDeleted = 0
		</where>
	</update>
	
	<select id="countByMaterialId" parameterType="long" resultType="int">
		SELECT count(*)
		FROM que_material_node
		<where>
			materialId= #{materialId}
			AND isDeleted = 0
		</where>
	</select>
	
	<update id="deleteMaterialNodeByMaterialId" parameterType="long">
		UPDATE que_material_node
		<set>
			isDeleted = 1,
			modifiedOn = now()
		</set>
		<where>
			materialId= #{materialId}
			AND isDeleted = 0
		</where>
	</update>
	
	<select id="queryMaterialNodesByMaterialId" parameterType="long"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialId = #{materialId}
			AND isDeleted = 0
		</where>
		ORDER BY parentId ASC, ord ASC
	</select>
	
	<select id="queryQueKnowledgeTreeNodes"
		parameterType="cn.strong.leke.question.model.QueKnowledgeTreeQuery"
		resultType="cn.strong.leke.question.model.StatisMaterialNode">
		SELECT a.* , b.queCount
		FROM que_material_node a
		LEFT JOIN (
			SELECT c.materialNodeId, count(DISTINCT d.questionId) as queCount
			FROM que_material_node c, (
				SELECT e.questionId, g.materialNodeId, g.materialId, g.lft, g.rgt
				FROM que_question e
				LEFT JOIN que_question_knowledge f
				ON e.questionId = f.questionId
				AND f.isDeleted = 0
				LEFT JOIN que_material_node g
				ON f.materialNodeId = g.materialNodeId
				AND g.isDeleted = 0
				WHERE e.isDeleted= 0
				AND e.parentId IS NULL
				AND e.isDisabled = 0
				<if test="statusType == 4 or statusType == 5 or statusType == 7">
					AND e.questionStatus = #{statusType}
				</if>
				<if test="statusType == 99">
					AND (e.questionStatus = 4 OR e.questionStatus = 7)
				</if>
			) d
			<where> 
				AND c.materialId = d.materialId
				<![CDATA[
				AND d.lft >= c.lft
				AND d.rgt <= c.rgt
				]]>
				AND c.isDeleted = 0
			</where>
			GROUP BY c.materialNodeId
		) b
		ON a.materialNodeId = b.materialNodeId
		WHERE a.materialId = #{materialId}
		AND a.parentId = #{parentId}
		AND a.isDeleted = 0
		ORDER BY a.ord ASC
	</select>
	
	<update id="updateLftRgtIndex" parameterType="cn.strong.leke.model.question.MaterialNode">
		UPDATE que_material_node
		<set>
			lft = #{lft},
			rgt = #{rgt},
			modifiedOn = now()
		</set>
		<where>
			AND materialNodeId = #{materialNodeId}
			AND isDeleted = 0
		</where>
	</update>
	
	<select id="getSameOrderFrontNode" parameterType="cn.strong.leke.model.question.MaterialNode"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialId = #{materialId}
			AND parentId = #{parentId}
			<![CDATA[
				AND materialNodeId < #{materialNodeId}
			]]>
			AND ord = #{ord}
			AND isDeleted = 0
		</where>
	</select>
	
	<select id="getSameOrderAfterNode" parameterType="cn.strong.leke.model.question.MaterialNode"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialId = #{materialId}
			AND parentId = #{parentId}
			<![CDATA[
				AND materialNodeId > #{materialNodeId}
			]]>
			AND ord = #{ord}
			AND isDeleted = 0
		</where>
	</select>
	
	<select id="getOrderFrontNode" parameterType="cn.strong.leke.model.question.MaterialNode"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialId = #{materialId}
			AND parentId = #{parentId}
			<![CDATA[
			AND ord < #{ord}
			]]>
			AND isDeleted = 0
		</where>
	</select>
	
	<select id="getOrderAfterNode" parameterType="cn.strong.leke.model.question.MaterialNode"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT 
			materialNodeId, materialNodeName, materialNodeCode, nodeType, schoolStageId, gradeId,
			subjectId, materialId, knowledgeId, parentId, ord, lft, rgt,
			isDeleted, createdBy, createdOn, modifiedBy, modifiedOn
		FROM que_material_node
		<where>
			materialId = #{materialId}
			AND parentId = #{parentId}
			<![CDATA[
			AND ord > #{ord}
			]]>
			AND isDeleted = 0
		</where>
	</select>
	
	<select id="getPath" parameterType="long"
		resultType="cn.strong.leke.model.question.MaterialNode">
		SELECT a.*
		FROM que_material_node a
		JOIN que_material_node b 
		ON b.materialNodeId = #{materialNodeId}
		AND b.isDeleted = 0
		<where>
			a.materialId = b.materialId
			<![CDATA[
			AND a.lft <= b.lft
			AND a.rgt >= b.rgt
			]]>
			AND a.isDeleted = 0
		</where>
		ORDER BY a.lft ASC
	</select>
</mapper>