package cn.strong.leke.homework.controller;

import static java.util.stream.Collectors.toList;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.strong.leke.common.serialize.support.json.JsonUtils;
import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.context.base.UserBaseContext;
import cn.strong.leke.context.user.UserContext;
import cn.strong.leke.framework.exceptions.Validation;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.framework.web.JsonResult;
import cn.strong.leke.homework.manage.SheetQueryService;
import cn.strong.leke.homework.manage.SheetTaskService;
import cn.strong.leke.homework.model.HomeworkDtl;
import cn.strong.leke.homework.model.LekeNoErrDto;
import cn.strong.leke.homework.model.SheetPage;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.homework.service.HomeworkService;
import cn.strong.leke.homework.util.SheetCst;
import cn.strong.leke.model.user.UserBase;
import cn.strong.leke.paper.sheet.model.position.PositionSheet;
import cn.strong.leke.remote.service.paper.ISheetRemoteService;

@Controller
@RequestMapping("/auth/teacher/sheet/*")
public class SheetLekeNoController {

	@Resource
	private SheetTaskService sheetTaskService;
	@Resource
	private SheetQueryService sheetQueryService;
	@Resource
	private HomeworkService homeworkService;
	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private ISheetRemoteService sheetRemoteService;

	@RequestMapping(value = "/lekeno/index", method = RequestMethod.GET)
	public String lekenoIndex(String pageId, Model model) {
		model.addAttribute("pageId", pageId);
		return "/auth/common/sheet/lekeno/index";
	}

	@ResponseBody
	@RequestMapping("/lekeno/get")
	public Object lekenoGet(String pageId) {
		Long schoolId = UserContext.user.getCurrentSchoolId();
		SheetPage sheetPage = this.sheetQueryService.getSheetPageById(pageId);
		PositionSheet positionSheet = this.sheetRemoteService.getPositionSheet(Long.parseLong(sheetPage.getSheetId()));
		List<String> imgs = sheetPage.getPages().stream().sorted(SheetCst.COMP_BLOCK).map(v -> v.getImg())
				.collect(toList());
		List<Map<String, Object>> homeworks = this.homeworkService.findHomeworkByPaperId(positionSheet.getPaperId(),
				schoolId);
		return new JsonResult().addDatas("pageId", pageId).addDatas("imgs", imgs).addDatas("homeworks", homeworks)
				.addDatas("homeworkId", 0);
	}

	@ResponseBody
	@RequestMapping("/lekeno/users")
	public Object homeworks(Long homeworkId, String userName, Page page) {
		boolean isLekeNo = NumberUtils.isDigits(userName);
		List<HomeworkDtl> homeworkDtlList;
		if (isLekeNo) {
			// 作乐号处理
			homeworkDtlList = homeworkDtlService.findHomeworkDtlByHomeworkIdAndStudentName(homeworkId, null, null);
		} else {
			// 作姓名处理
			homeworkDtlList = homeworkDtlService.findHomeworkDtlByHomeworkIdAndStudentName(homeworkId, userName, null);
		}
		List<UserVM> items = homeworkDtlList.stream().map(this::resolveUserVM).filter(user -> {
			if (isLekeNo) {
				return user.getLekeNo().startsWith(userName);
			}
			return true;
		}).collect(toList());
		return new JsonResult().addDatas("items", items);
	}

	@ResponseBody
	@RequestMapping("/lekeno/next")
	public Object lekenoNext(String pageId) {
		SheetPage sheetPage = this.sheetQueryService.getNextLekeNoSheetPageById(pageId);
		return new JsonResult().addDatas("nextPageId", sheetPage != null ? sheetPage.getId() : null);
	}

	@ResponseBody
	@RequestMapping("/lekeno/save")
	public Object lekenoSave(String dataJson) {
		// 匹配失败，该学生的此份作业在乐课网上已有成绩！
		LekeNoErrDto lekeNoErrDto = JsonUtils.fromJSON(dataJson, LekeNoErrDto.class);
		HomeworkDtl homeworkDtl = this.homeworkDtlService.getHomeworkDtlById(lekeNoErrDto.getHomeworkDtlId());
		Validation.isNull(homeworkDtl.getSubmitTime(), "匹配失败，该学生的此份作业在乐课网上已有成绩！");
		this.sheetTaskService.executeLekeNoUnknowError(lekeNoErrDto);
		SheetPage sheetPage = this.sheetQueryService.getNextLekeNoSheetPageById(lekeNoErrDto.getPageId());
		return new JsonResult().addDatas("nextPageId", sheetPage != null ? sheetPage.getId() : null);
	}

	/**
	 * 某页详情
	 * @return
	 */
	@RequestMapping(value = "/qcode/index", method = RequestMethod.GET)
	public String qcodeIndex(String pageId, Model model) {
		SheetPage sheetPage = this.sheetQueryService.getSheetPageById(pageId);
		List<String> imgs = sheetPage.getPages().stream().sorted(SheetCst.COMP_BLOCK).map(v -> v.getImg()).collect(toList());
		model.addAttribute("sheetPage", sheetPage);
		model.addAttribute("imgs", JsonUtils.toJSON(imgs));
		return "/auth/common/sheet/qcode/index";
	}

	private UserVM resolveUserVM(HomeworkDtl homeworkDtl) {
		UserBase userBase = UserBaseContext.getUserBaseByUserId(homeworkDtl.getStudentId());
		UserVM userVM = new UserVM();
		userVM.setHomeworkDtlId(homeworkDtl.getHomeworkDtlId());
		userVM.setIsSubmit(homeworkDtl.getSubmitTime() != null);
		userVM.setUserId(userBase.getUserId());
		userVM.setUserName(userBase.getUserName());
		userVM.setLekeNo(userBase.getLoginName());
		if (CollectionUtils.isEmpty(userBase.getStructList()) || userBase.getStructList().get(0).getDepName() == null) {
			userVM.setClassName("乐课网");
		} else {
			userVM.setClassName(userBase.getStructList().get(0).getDepName());
		}
		return userVM;
	}

	protected static class UserVM {

		private Long homeworkDtlId;
		private Long userId;
		private String userName;
		private String lekeNo;
		private String className;
		private Boolean isSubmit;

		public Long getHomeworkDtlId() {
			return homeworkDtlId;
		}

		public void setHomeworkDtlId(Long homeworkDtlId) {
			this.homeworkDtlId = homeworkDtlId;
		}

		public Long getUserId() {
			return userId;
		}

		public void setUserId(Long userId) {
			this.userId = userId;
		}

		public String getUserName() {
			return userName;
		}

		public void setUserName(String userName) {
			this.userName = userName;
		}

		public String getLekeNo() {
			return lekeNo;
		}

		public void setLekeNo(String lekeNo) {
			this.lekeNo = lekeNo;
		}

		public String getClassName() {
			return className;
		}

		public void setClassName(String className) {
			this.className = className;
		}

		public Boolean getIsSubmit() {
			return isSubmit;
		}

		public void setIsSubmit(Boolean isSubmit) {
			this.isSubmit = isSubmit;
		}
	}
}