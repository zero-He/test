package cn.strong.leke.homework.service.impl;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import cn.strong.leke.common.utils.DateUtils;
import cn.strong.leke.context.base.UserBaseContext;
import cn.strong.leke.context.user.cst.RoleCst;
import cn.strong.leke.core.business.incentive.DynamicHelper;
import cn.strong.leke.core.business.notice.NoticeHelper;
import cn.strong.leke.framework.exceptions.ValidateException;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.homework.dao.mybatis.HomeworkDao;
import cn.strong.leke.homework.dao.mybatis.HomeworkDtlDao;
import cn.strong.leke.homework.model.ApiHwCount;
import cn.strong.leke.homework.model.ClassAddUserEvent;
import cn.strong.leke.homework.model.Homework;
import cn.strong.leke.homework.model.HomeworkDTO;
import cn.strong.leke.homework.model.HomeworkDtl;
import cn.strong.leke.homework.model.HomeworkDtlInfo;
import cn.strong.leke.homework.model.HomeworkQuery;
import cn.strong.leke.homework.model.HomeworkReviewInfo;
import cn.strong.leke.homework.model.HomeworkType;
import cn.strong.leke.homework.model.Statistics;
import cn.strong.leke.homework.model.mobile.MPersonWorkCount;
import cn.strong.leke.homework.model.mobile.MPersonWorkDTO;
import cn.strong.leke.homework.model.mobile.MPersonWorkQuery;
import cn.strong.leke.homework.model.mobile.MSchoolWorkQuery;
import cn.strong.leke.homework.model.query.ApiHomeworkListQuery;
import cn.strong.leke.homework.model.query.ClassHomeworkQuery;
import cn.strong.leke.homework.model.query.HomeworkIncentiveQuery;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.homework.service.HomeworkService;
import cn.strong.leke.homework.util.HomeworkCst;
import cn.strong.leke.homework.util.HomeworkUtils;
import cn.strong.leke.homework.util.ScoreUtils;
import cn.strong.leke.model.BaseModelHelper;
import cn.strong.leke.model.base.Subject;
import cn.strong.leke.model.incentive.DynamicInfo;
import cn.strong.leke.model.incentive.IncentiveTypes;
import cn.strong.leke.model.user.User;
import cn.strong.leke.model.user.UserBase;
import cn.strong.leke.notice.model.todo.HwAssignEvent;
import cn.strong.leke.notice.model.todo.HwDtlInfo;
import cn.strong.leke.notice.model.todo.HwInvalidEvent;
import cn.strong.leke.notice.model.todo.HwModifyEvent;
import cn.strong.leke.remote.service.lesson.IKlassRemoteService;
import cn.strong.leke.tutor.model.course.ScheduleQuery;
import cn.strong.leke.tutor.model.course.ScheduleStat;

/**
 * 教师作业service
 * @author  basil
 * @created 2014-6-23 上午9:46:33
 * @since   v1.0.0
 */
@Service("homeworkService")
public class HomeworkServiceImpl implements HomeworkService {

	protected static final Logger logger = LoggerFactory.getLogger(HomeworkServiceImpl.class);

	@Resource
	private HomeworkDao homeworkDao;
	@Resource
	private HomeworkDtlDao homeworkDtlDao;
	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private IKlassRemoteService klassRemoteService;
	@Resource
	private MessageService messageService;
	@Resource
	private HomeworkService homeworkService;

	@Override
	public Homework getHomeworkById(Long homeworkId) {
		return homeworkDao.getHomeworkById(homeworkId);
	}

	@Override
	public Long getHomeworkIdByBeikeGuid(String beikeGuid) {
		return this.homeworkDao.getHomeworkIdByBeikeGuid(beikeGuid);
	}

	@Override
	public Long resolveLessonHomeworkIdByHomeworkId(Long homeworkId) {
		Homework homework = this.homeworkDao.getHomeworkById(homeworkId);
		if (homework != null) {
			String beikeGuid = homework.getBeikeGuid();
			return this.homeworkDao.getHomeworkIdByBeikeGuid(beikeGuid);
		}
		return null;
	}

	@Override
	public List<HomeworkDTO> findHomeworkList(HomeworkQuery homework, Page page) {
		return homeworkDao.queryHomeworkList(homework, page);
	}
	@Override
	public List<HomeworkDTO> findDumpedHomeworkList(HomeworkQuery query, Page page) {
		return homeworkDao.findDumpedHomeworkList(query, page);
	}

	@Override
	public List<HomeworkDTO> findProvostHomeworkList(ClassHomeworkQuery query, Page page) {
		return homeworkDao.queryClassTeacherHomeworkList(query, page);
	}

	public void saveCourseSetUserMQ(ClassAddUserEvent event) {
		List<UserBase> users = UserBaseContext.findUserBaseByUserId(event.getUserIds().toArray(new Long[0]));
		for (Long classId : event.getClassIds()) {
			List<Homework> homeworkList = this.homeworkDao.findHomeworkByClassId(classId);
			for (Homework homework : homeworkList) {
				for (UserBase user : users) {
					HomeworkDtl homeworkDtl = this.homeworkDtlDao
							.getHomeworkDtlByHomeworkIdAndStudentId(homework.getHomeworkId(), user.getId());
					if (homeworkDtl == null) {
						homeworkDtl = new HomeworkDtl();
						homeworkDtl.setHomeworkId(homework.getHomeworkId());
						homeworkDtl.setStudentId(user.getId());
						homeworkDtl.setStudentName(user.getUserName());
						homeworkDtl.setSubmitStatus(HomeworkCst.HOMEWORK_SUBMIT_STATUS_NOT);
						homeworkDtl.setSchoolId(homework.getSchoolId());
						homeworkDtl.setOrderTime(homework.getCloseTime());
						homeworkDtl.setIsDeleted(false);
						homeworkDtl.setCreatedBy(homework.getCreatedBy());
						homeworkDtl.setCreatedOn(new Date());
						this.homeworkDtlDao.saveHomeworkDtl(homeworkDtl);
					}
				}
				this.homeworkDao.updateHomeworkTotalNum(homework.getHomeworkId());
			}
		}
	}

	@Override
	public HomeworkDtl createStuBeikeHwWithTx(Long homeworkId, User user) {
		HomeworkDtl homeworkDtl = this.homeworkDtlDao.getHomeworkDtlByHomeworkIdAndStudentId(homeworkId, user.getId());
		if (homeworkDtl != null) {
			return homeworkDtl;
		}
		Homework homework = this.homeworkDao.getHomeworkById(homeworkId);
		boolean inClass = this.klassRemoteService.checkStudentIdInClass(user.getId(), homework.getClassId());
		if (!inClass) {
			return null;
		}
		homeworkDtl = new HomeworkDtl();
		homeworkDtl.setHomeworkId(homework.getHomeworkId());
		homeworkDtl.setStudentId(user.getId());
		homeworkDtl.setStudentName(user.getUserName());
		homeworkDtl.setSubmitStatus(HomeworkCst.HOMEWORK_SUBMIT_STATUS_NOT);
		homeworkDtl.setSchoolId(homework.getSchoolId());
		homeworkDtl.setOrderTime(homework.getCloseTime());
		BaseModelHelper.fillInsertProps(homeworkDtl, user.getId());
		this.homeworkDtlDao.saveHomeworkDtl(homeworkDtl);
		this.homeworkDao.updateHomeworkTotalNum(homework.getHomeworkId());
		return homeworkDtl;
	}

	@Override
	public void updateHomeworkTimeByCourseSingle(Long courseSingleId, Date startTime, Date endTime) {
		List<Homework> homeworkList = this.homeworkDao.findHomeworkByCourseSingleId(courseSingleId);
		homeworkList.forEach(homework -> {
			if (HomeworkCst.HOMEWORK_USE_PHASE_BEFORE == homework.getUsePhase()) {
				homework.setStartTime(HomeworkUtils.reckonHomeworkStartTime(startTime));
				homework.setCloseTime(startTime);
			} else if (HomeworkCst.HOMEWORK_USE_PHASE_LESSON == homework.getUsePhase()) {
				homework.setStartTime(startTime);
				homework.setCloseTime(endTime);
				if (homework.getResType() != HomeworkCst.HOMEWORK_RES_PAPER) {
					// 不需要向下一阶段流转的课中作业截止时间同课后作业
					homework.setCloseTime(HomeworkUtils.reckonHomeworkCloseTime(startTime));
				}
			} else if (HomeworkCst.HOMEWORK_USE_PHASE_AFTER == homework.getUsePhase()) {
				homework.setStartTime(endTime);
				homework.setCloseTime(HomeworkUtils.reckonHomeworkCloseTime(startTime));
			}
			homeworkDao.updateHomeworkDate(homework.getHomeworkId(), homework.getStartTime(), homework.getCloseTime());
			homeworkDtlDao.updateHomeworkDtlOrderTime(homework.getHomeworkId(), homework.getCloseTime());
		});
	}
	
	@Override
	public List<ApiHwCount> getHwByMonth(Long teacherId, String month) {
		Date headTime = DateUtils.parseDate(month, "yyyy-MM");
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(headTime);
		calendar.add(Calendar.MONTH, 1);
		Date tailTime = calendar.getTime();
		return homeworkDao.queryHwByMonth(teacherId, headTime, tailTime);
	}

	@Deprecated
	@Override
	public List<Homework> getHwByDay(Long teacherId, String day) {
		Date headTime = DateUtils.parseDate(day, DateUtils.SHORT_DATE_PATTERN);
		Date tailTime = DateUtils.addDays(headTime, 1);
		return homeworkDao.getHwByDay(teacherId, headTime, tailTime);
	}
	
	/**
	 * 查询老师作业
	 * @param query
	 * @return
	 */
	public List<Homework> findTeacherHomework(ApiHomeworkListQuery query){
		return this.homeworkDao.findTeacherHomework(query);
	}
	
	
	/**
	 * 统计老师作业数，待批改和待复批数
	 * @param teacherId
	 * @return
	 */
	@Override
	public Map<String, Long> findTeacherHomeworkInfoTotal(Long teacherId) {
		return this.homeworkDao.findTeacherHomeworkInfoTotal(teacherId);
	}
	
	@Override
	public List<Homework> findLessonWorkByLessonId(Long teacherId, Long lessonId, Integer resType, Boolean isSnapshot) {
		return this.homeworkDao.findLessonWorkByLessonId(teacherId, lessonId, resType, isSnapshot);
	}

	@Override
	public List<Homework> findPaperWorkByName(Long classId, Long teacherId, String homeworkName, Page page) {
		return this.homeworkDao.findPaperWorkByName(classId, teacherId, homeworkName, page);
	}

	@Override
	public List<ApiHwCount> queryHwStuMonth(Long studentId, String month) {
		Date headTime = DateUtils.parseDate(month, "yyyy-MM");
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(headTime);
		calendar.add(Calendar.MONTH, 1);
		Date tailTime = calendar.getTime();
		return homeworkDao.queryHwStuMonth(studentId, headTime, tailTime);
	}

	@Override
	public List<HomeworkDTO> queryClassTeacherHomeworkList(ClassHomeworkQuery query, Page page) {
		return homeworkDao.queryClassTeacherHomeworkList(query, page);
	}

	@Override
	public List<HomeworkDTO> findMobileSchoolWorkList(MSchoolWorkQuery query) {
		return homeworkDao.findMobileSchoolWorkList(query);
	}

	@Override
	public void updateHomeworkDate(Long homeworkId, Date startTime, Date closeTime) {
		homeworkDao.updateHomeworkDate(homeworkId, startTime, closeTime);
		homeworkDtlDao.updateHomeworkDtlOrderTime(homeworkId, closeTime);
		//作业修改，发送待办
		HwModifyEvent event = new HwModifyEvent();
		event.setHomeworkId(homeworkId);
		event.setStartTime(startTime);
		event.setCloseTime(closeTime);
		NoticeHelper.todo(event);
	}

	@Override
	public void updateHomeworkInvalid(Long homeworkId, Long teacherId) {
		Homework homework = homeworkDao.getHomeworkById(homeworkId);
		if(homework.getExam()){
			if((homework.getStartTime()).before(new Date())){
				throw new ValidateException("该试卷不能作废！");
			}
		}
		homeworkDao.updateHomeworkInvalid(homeworkId, teacherId);
		//作废作业，发送待办取消相关的待办信息
		HwInvalidEvent event = new HwInvalidEvent();
		event.setHomeworkId(homeworkId);
		NoticeHelper.todo(event);
		//发送作废提醒
		List<HomeworkDtl> homeworkDtls = homeworkDtlDao.findHomeworkDtlListByHomeworkId(homeworkId);
		if (!homeworkDtls.isEmpty()) {
			List<Long> userIds = homeworkDtls.stream().map(s -> s.getStudentId()).collect(Collectors.toList());
			messageService.sendInvalidLetterMessage(userIds, homework);
		}
	}

	@Override
	public List<HwAssignEvent> findHwAssignEventsByCourseSingleId(Long courseSingleId) {
		return this.homeworkDao.findHwAssignEventsByCourseSingleId(courseSingleId);
	}

	@Override
	public List<ScheduleStat> findHomeworkScheduleByQuery(ScheduleQuery query) {
		return this.homeworkDao.findHomeworkScheduleByQuery(query);
	}

	@Override
	public List<Map<String, Object>> getCorrectHomeworks(Long teacherId, Date startTime) {
		return homeworkDao.getCorrectHomeworks(teacherId, startTime);
	}

	@Override
	public Integer getReCorrectNum(HomeworkQuery query) {
		return homeworkDao.getReCorrectNum(query);
	}

	@Override
	public List<Map<String, Object>> queryReCorrectHomeworkList(HomeworkQuery query, Page page) {
		return homeworkDao.queryReCorrectHomeworkList(query, page);
	}
	
	@Override
	public List<HomeworkDTO> queryReCorrectHomeworkDTOList(HomeworkQuery query, Page page){
		return homeworkDao.queryReCorrectHomeworkDTOList(query, page);
	}

	@Override
	public Integer saveOpenAnswer(Long homeworkId, Long teacherId) {
		Integer result = homeworkDao.saveOpenAnswer(homeworkId, teacherId);
		Homework homework = homeworkDao.getHomeworkById(homeworkId);
		if (homework.getStartTime().before(new Date())) {
			List<HomeworkDtl> homeworkDtls = homeworkDtlService.findHomeworkDtlListByHomeworkId(homeworkId);
			if (!homeworkDtls.isEmpty()) {
				List<Long> userIds = homeworkDtls.stream().map(s -> s.getStudentId()).collect(Collectors.toList());
				messageService.sendOpenAnswerLetterMessage(userIds, homework.getHomeworkName());
			}
		}
		return result;
	}

	@Override
	public Integer saveSelfCheck(Long homeworkId, Long teacherId) {
		homeworkDao.saveSelfCheck(homeworkId, teacherId);
		Integer result = homeworkDtlDao.updateBugFixStageRevised(homeworkId, teacherId);
		//发送待办消息
		Homework homework = homeworkDao.getHomeworkById(homeworkId);
		List<Map<String, Long>> maps = homeworkDtlService.findSubmitHomeworkDtls(homeworkId);
		if (!maps.isEmpty()) {
			String homeworkName = homework.getHomeworkName();
			//消息提醒
			List<Long> userIds = maps.stream().map(s -> {
				return s.get("studentId");
			}).collect(Collectors.toList());
			messageService.sendSelfCheckLetterMessage(userIds, homeworkName);
			//待办
			List<HwDtlInfo> hwDtlInfos = maps.stream().map(s -> {
				HwDtlInfo hwDtlInfo = new HwDtlInfo();
				hwDtlInfo.setHomeworkDtlId(s.get("homeworkDtlId"));
				hwDtlInfo.setStudentId(s.get("studentId"));
				return hwDtlInfo;
			}).collect(Collectors.toList());
			messageService.sendSelfCheckTodoMessage(hwDtlInfos, homeworkId, teacherId, homeworkName);
		}
		return result;
	}

	@Override
	public List<Map<String, Object>> findHomeworkByPaperId(Long paperId, Long schoolId) {
		return this.homeworkDao.findHomeworkByPaperId(paperId, schoolId);
	}

	@Override
	public List<Subject> findOrganClassSubject(Long classId) {
		return this.homeworkDao.findOrganClassSubject(classId);
	}

	@Override
	public void delHomework(List<Long> homeworkIds,Long teacherId) {
		this.homeworkDao.delHomework(homeworkIds,teacherId);
		
	}
	
	@Override
	public void delHwByCourseSinglId(Long courseSingleId,Long userId) {
		this.homeworkDao.delHwByCourseSinglId(courseSingleId,userId);
		
	}

	@Override
	public void execTeacherHwIncentvie() {
		HomeworkIncentiveQuery query = buildQuery();
		while (true) {
			List<Homework> list = this.homeworkDao.findHwCorrectInfo(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkId());
			}
			for (Homework homework : list) {
				if(homework.getFinishNum().equals(0)){
					continue;
				}
				//批改
				correctHwIncentive(homework);
			}
		}
		query.setFlagId(0L);
		while (true) {
			List<HomeworkReviewInfo> list = this.homeworkDao.findHwReviewInfo(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkId());
			}
			for (HomeworkReviewInfo homework : list) {
				//复批
				DynamicHelper.publish(builReviewHwDynamicInfo(homework));
			}
		}
	}
	
	
	private HomeworkIncentiveQuery buildQuery(){
		Date curDate = new Date();
		curDate =DateUtils.parseDate(DateUtils.formatDate(curDate));
		Date start = DateUtils.addDays(curDate,-8);
		Date end = DateUtils.addDays(start,1);
		HomeworkIncentiveQuery query = new HomeworkIncentiveQuery();
		query.setEnd(end);
		query.setStart(start);
		query.setFlagId(0L);
		query.setLimit(10000L);
		return query;
	}
	

	@Override
	public void execStudentHwIncentvie() {
		HomeworkIncentiveQuery query = buildQuery();
		//待订正
		while (true) {
			List<HomeworkDtlInfo> list = this.homeworkDtlDao.findBugfixHomeworkDtl(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkDtlId());
			}
			for (HomeworkDtlInfo hwInfo : list) {
				DynamicInfo dynamicInfo = new DynamicInfo();
				dynamicInfo.setTypeId(IncentiveTypes.STUDENT.HW_NO_BUGFIX);
				dynamicInfo.setTitle(hwInfo.getHomeworkName());
				dynamicInfo.setUserId(hwInfo.getStudentId());
				dynamicInfo.setUserName(hwInfo.getStudentName());
				dynamicInfo.setRoleId(RoleCst.STUDENT);
				dynamicInfo.setSchoolId(hwInfo.getSchoolId());
				DynamicHelper.publish(dynamicInfo);
			}
		}
		//未完成
		query.setFlagId(0L);
		while (true) {
			List<HomeworkDtlInfo> list = this.homeworkDtlDao.findToFinishHomeworkDtl(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkDtlId());
			}
			for (HomeworkDtlInfo hwInfo : list) {
				DynamicInfo dynamicInfo = new DynamicInfo();
				dynamicInfo.setTypeId(IncentiveTypes.STUDENT.HW_NO_SUBMIT);
				dynamicInfo.setTitle(hwInfo.getHomeworkName());
				dynamicInfo.setUserId(hwInfo.getStudentId());
				dynamicInfo.setUserName(hwInfo.getStudentName());
				dynamicInfo.setRoleId(RoleCst.STUDENT);
				dynamicInfo.setSchoolId(hwInfo.getSchoolId());
				DynamicHelper.publish(dynamicInfo);
			}
		}
	}
	
	/**
	 * 老师作业批改率的激励
	 * @param homework
	 */
	private void correctHwIncentive(Homework homework) {
		BigDecimal correctRate = diviDecimal(BigDecimal.valueOf(homework.getCorrectNum()),
				BigDecimal.valueOf(homework.getFinishNum()));
		Long typeId = ScoreUtils.getTypeIdByRate(correctRate);
		if (typeId != null) {
			DynamicInfo dynamicInfo = new DynamicInfo();
			dynamicInfo.setTypeId(typeId);//作业批改激励
			dynamicInfo.setTitle(homework.getHomeworkName());
			dynamicInfo.setUserId(homework.getTeacherId());
			dynamicInfo.setUserName(homework.getTeacherName());
			dynamicInfo.setRoleId(RoleCst.TEACHER);
			dynamicInfo.setSchoolId(homework.getSchoolId());
			DynamicHelper.publish(dynamicInfo);
		}
	}
	private DynamicInfo builReviewHwDynamicInfo(HomeworkReviewInfo homework){
		DynamicInfo dynamicInfo = new DynamicInfo();
		if(homework.getBugfixStage() == 2){
			dynamicInfo.setTypeId(IncentiveTypes.TEACHER.HW_NO_REVIEW_WORK); 
		}else if(homework.getReviewTime() != null) {
			dynamicInfo.setTypeId(IncentiveTypes.TEACHER.HW_REVIEW_WORK); 
		}
		dynamicInfo.setTitle(homework.getHomeworkName());
		dynamicInfo.setUserId(homework.getTeacherId());
		dynamicInfo.setUserName(homework.getTeacherName());
		dynamicInfo.setRoleId(RoleCst.TEACHER);
		dynamicInfo.setSchoolId(homework.getSchoolId());
		return dynamicInfo;
	}
	
	private BigDecimal diviDecimal(BigDecimal a,BigDecimal b){
		if(b==null){
			return BigDecimal.valueOf(0);
		}
		return a.divide(b,2,RoundingMode.HALF_UP);
	}

	@Override
	public Boolean recoverHomework(List<Long> homeworkIds,Long teacherId) {
		boolean b = homeworkIds.stream().anyMatch((x) -> {
			Homework homework = homeworkService.getHomeworkById(x);
			if (homework.getHomeworkType().equals(HomeworkType.Exam.value) && homework.getExam() == true && homework.getStartTime().before(new Date())) {
				return true;
			} else {
				return false;
			}
		});
		if(!b){
			this.homeworkDao.recoverHomework(homeworkIds,teacherId);
		}
		return b;
	}

	@Override
	public Map<String, Integer> findStuHomeworkInfoTotal(Long studentId,Long subjectId) {
		Statistics statistics = this.homeworkDao.findStuHomeworkInfoTotal(studentId,subjectId);
		Map<String, Integer> map = new HashMap<>();
		map.put("total", statistics.getTotal());
		map.put("doingTotal", statistics.getDoingTotal());
		map.put("bugfixTotal", statistics.getBugfixTotal());
		return map;
	}

	@Override
	public List<Long> findSubjectIdFromHomework(Long teacherId, Long schoolId) {
		return this.homeworkDao.findSubjectIdFromHomework(teacherId, schoolId);
	}

	@Override
	public int getCorrectNumByUserId(Long userId) {
		return this.homeworkDao.getCorrectNumByUserId(userId);
	}
	
	@Override
	public Integer getUnfinishedNum(Long teacherId){
		return this.homeworkDao.getUnfinishedNum(teacherId);
	}

	@Override
	public List<MPersonWorkDTO> queryMobileTeacherWorkList(MPersonWorkQuery query) {
		return this.homeworkDao.selectMobileTeacherWorkList(query);
	}

	@Override
	public MPersonWorkCount queryMobileTeacherWorkCount(MPersonWorkQuery query) {
		return this.homeworkDao.selectMobileTeacherWorkCount(query);
	}

	@Override
	public Long getPaperIdByHomeworkDtlId(Long homeworkDtlId) {
		return this.homeworkDao.getPaperIdByHomeworkDtlId(homeworkDtlId);
	}
}
