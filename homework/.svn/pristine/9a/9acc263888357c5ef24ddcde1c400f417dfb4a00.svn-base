package cn.strong.leke.homework.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.strong.leke.common.utils.BeanUtils;
import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.context.base.GradeContext;
import cn.strong.leke.context.base.SchoolStageContext;
import cn.strong.leke.context.base.SubjectContext;
import cn.strong.leke.context.user.TeacherContext;
import cn.strong.leke.context.user.UserContext;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.framework.web.JsonResult;
import cn.strong.leke.homework.model.HomeworkDTO;
import cn.strong.leke.homework.model.HomeworkDtlQuery;
import cn.strong.leke.homework.model.HomeworkQuery;
import cn.strong.leke.homework.model.Kemu;
import cn.strong.leke.homework.model.MyHomeworkDTO;
import cn.strong.leke.homework.model.SubjectExtend;
import cn.strong.leke.homework.model.SubjectHwStatistics;
import cn.strong.leke.homework.model.SubjectHwStatisticsExtend;
import cn.strong.leke.homework.model.query.ClassHomeworkQuery;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.homework.service.HomeworkService;
import cn.strong.leke.homework.util.DiagHelp;
import cn.strong.leke.lesson.model.ClazzQuery;
import cn.strong.leke.model.base.Clazz;
import cn.strong.leke.model.base.Subject;
import cn.strong.leke.model.user.Teacher;
import cn.strong.leke.model.user.User;
import cn.strong.leke.remote.model.tukor.GradeRemote;
import cn.strong.leke.remote.model.tukor.SchoolStageRemote;
import cn.strong.leke.remote.model.tukor.SubjectRemote;
import cn.strong.leke.remote.service.lesson.IKlassRemoteService;
import cn.strong.leke.remote.service.tutor.user.IUserRemoteService;

@Controller
@RequestMapping("/auth/m/*")
public class MHomeworkController {

	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private HomeworkService homeworkService;
	@Resource
	private IUserRemoteService userRemoteService;
	@Resource
	private IKlassRemoteService klassRemoteService;
	
	/**
	 * 学生：作业管家
	 */
	@RequestMapping("student/homework/manager")
	public String studentManager(Model model){
		User user = UserContext.user.get();
		long studentId = user.getId();
		List<SubjectHwStatistics> list = homeworkDtlService.findStudentSubjectHwStatisticsList(studentId,false);
		List<SubjectHwStatisticsExtend> extendList = list.stream().map(v->{
			SubjectHwStatisticsExtend extend = new SubjectHwStatisticsExtend();
			BeanUtils.copyProperties(extend, v);
			extend.setKemu(Kemu.getKemu(extend.getSubjectId()));
			return extend;
		}).collect(Collectors.toList());
		if(CollectionUtils.isEmpty(list)){
			return "/tips/m-nodata";
		}
		model.addAttribute("subjectList",extendList);
		return "/auth/m/homework/manager/student";
	}
	/**
	 * 老师：作业管家
	 */
	@RequestMapping("teacher/homework/manager")
	public String teacherManager(Model model){
		Date startTime = DiagHelp.getSemesterStarDate();
		List<Map<String, Object>> datas = homeworkService.getCorrectHomeworks(UserContext.user.getUserId(),startTime);
		if(CollectionUtils.isEmpty(datas)){
			return "/tips/m-nodata";
		}
		model.addAttribute("dataList", datas);
		return "/auth/m/homework/manager/teacher";
	}
	/**
	 * 家长：作业管家
	 */
	@RequestMapping("parent/homework/manager")
	public String parentManager(Model model){
		List<User> studentList = userRemoteService.findUserByParentId(UserContext.user.getUserId());
		if(CollectionUtils.isEmpty(studentList)){
			model.addAttribute("message", "暂无孩子");
			return "/tips/m-nodata";
		}
		model.addAttribute("studentList", studentList);
		return "/auth/m/homework/manager/parent";
	}
	/**
	 * 班主任：作业管家
	 */
	@RequestMapping("classTeacher/homework/manager")
	public String classTeacherManager(Model model){
		ClazzQuery query = new ClazzQuery();
		query.setType(Clazz.CLAZZ_ORGAN);
		User user = UserContext.user.get();
		query.setUserId(user.getId());
		query.setRoleId(user.getCurrentRole().getId());
		query.setSchoolId(user.getCurrentSchool().getId());
		//获取行政班级
		List<Clazz> clazzList = klassRemoteService.findClazzByQuery(query);
		if(CollectionUtils.isEmpty(clazzList)){
			model.addAttribute("message", "暂无班级");
			return "/tips/m-nodata";
		}
		model.addAttribute("clazzList", clazzList);
		return "/auth/m/homework/manager/classTeacher";
	}
	
	
	/**
	 * 学生：作业管家详情页
	 */
	@RequestMapping("student/homework/manager/detail")
	public String studentManagerHomework(Long subjectId,Model model){
		SubjectRemote subject = SubjectContext.getSubject(subjectId);
		model.addAttribute("subject", subject);
		return "/auth/m/homework/manager/detail/student";
	}
	/**
	 * 老师：作业管家详情页
	 */
	@RequestMapping("teacher/homework/manager/detail")
	public String teacherManagerHomework(Long classId,String className,Model model){
		model.addAttribute("className", className);
		model.addAttribute("classId", classId);
		return "/auth/m/homework/manager/detail/teacher";
	}
	/**
	 * 家长：作业管家详情页
	 */
	@RequestMapping("parent/homework/manager/detail")
	public String parentManagerHomework(Long subjectId,Long studentId,Model model){
		SubjectRemote subject = SubjectContext.getSubject(subjectId);
		model.addAttribute("subject", subject);
		model.addAttribute("studentId", studentId);
		return "/auth/m/homework/manager/detail/parent";
	}
	/**
	 * 班主任：作业管家详情页
	 */
	@RequestMapping("classTeacher/homework/manager/detail")
	public String classTeacherManagerHomework(Long classId,Long subjectId,Model model){
		SubjectRemote subject = SubjectContext.getSubject(subjectId);
		model.addAttribute("subject", subject);
		model.addAttribute("classId", classId);
		return "/auth/m/homework/manager/detail/classTeacher";
	}
	/**
	 * 教务/校长：作业管家详情页
	 */
	@RequestMapping("provost/homework/manager/detail")
	public String provostManagerHomework(Long gradeId,Model model){
		GradeRemote grade = GradeContext.getGrade(gradeId);
		SchoolStageRemote stage = SchoolStageContext.getSchoolStageByGradeId(gradeId);
		List<SubjectRemote> subjectList = stage.getSubjects();
		SubjectRemote all = new SubjectRemote();
		all.setSubjectName("全部");
		subjectList.add(0, all);
		model.addAttribute("grade", grade);
		model.addAttribute("subjectList", subjectList);
		return "/auth/m/homework/manager/detail/provost";
	}
	
	/**
	 * 学生：作业管家详情数据
	 */
	@RequestMapping("student/homework/manager/homeworkDetail")
	@ResponseBody
	public JsonResult studentManagerHomeworkDetail(Long subjectId,Integer homeworkType,Boolean isClose,Page page){
		HomeworkDtlQuery homeworkDtlQuery = new HomeworkDtlQuery();
		homeworkDtlQuery.setStudentId(UserContext.user.getUserId());
		homeworkDtlQuery.setHomeworkType(homeworkType);
		homeworkDtlQuery.setSubjectId(subjectId);
		homeworkDtlQuery.setIsClose(isClose);
		homeworkDtlQuery.setCloseTime(DiagHelp.getSemesterStarDate());
		List<MyHomeworkDTO> homeworkList = homeworkDtlService.getMyHomeworkList(homeworkDtlQuery, page);
		page.setDataList(homeworkList);
		JsonResult json = new JsonResult();
		json.addDatas("page", page);
		return json;
	}
	/**
	 * 老师：作业管家详情数据
	 */
	@RequestMapping("teacher/homework/manager/homeworkDetail")
	@ResponseBody
	public JsonResult teacherManagerHomeworkDetail(Long classId,Integer homeworkType,Boolean isClose,Page page){
		Teacher teacher = TeacherContext.teacher.get();
		HomeworkQuery homework = new HomeworkQuery();
		homework.setClassId(classId);
		homework.setHomeworkType(homeworkType);
		homework.setIsClose(isClose);
		homework.setTeacherId(teacher.getId());
		homework.setCloseTime(DiagHelp.getSemesterStarDate());
		List<HomeworkDTO> homeworkList = homeworkService.findHomeworkList(homework, page);
		page.setDataList(homeworkList);
		JsonResult json = new JsonResult();
		json.addDatas("page", page);
		return json;
	}
	/**
	 * 家长：作业管家详情数据
	 */
	@RequestMapping("parent/homework/manager/homeworkDetail")
	@ResponseBody
	public JsonResult parentManagerHomeworkDetail(Long studentId,Long subjectId,Integer homeworkType,Boolean isClose,Page page){
		HomeworkDtlQuery homeworkDtlQuery = new HomeworkDtlQuery();
		homeworkDtlQuery.setStudentId(studentId);
		homeworkDtlQuery.setHomeworkType(homeworkType);
		homeworkDtlQuery.setSubjectId(subjectId);
		homeworkDtlQuery.setIsClose(isClose);
		homeworkDtlQuery.setCloseTime(DiagHelp.getSemesterStarDate());
		List<MyHomeworkDTO> homeworkList = homeworkDtlService.getMyHomeworkList(homeworkDtlQuery, page);
		page.setDataList(homeworkList);
		JsonResult json = new JsonResult();
		json.addDatas("page", page);
		return json;
	}
	/**
	 * 班主任：作业管家详情数据
	 */
	@RequestMapping("classTeacher/homework/manager/homeworkDetail")
	@ResponseBody
	public JsonResult classTeacherManagerHomeworkDetail(Long classId,Integer subjectId,Integer homeworkType,Boolean isClose,Page page) {
		JsonResult json = new JsonResult();
		ClassHomeworkQuery query = new ClassHomeworkQuery();
		query.setClassId(Arrays.asList(new Long[]{classId}));
		query.setHomeworkType(homeworkType);
		query.setIsClose(isClose);
		query.setClassType(1);
		query.setSubjectId(subjectId);
		query.setSchoolId(UserContext.user.getCurrentSchoolId());
		query.setStartTime(DiagHelp.getSemesterStarDate());
		List<HomeworkDTO> homeworkList = new ArrayList<HomeworkDTO>();
		setQueryClassId(query);
		if(!(query.getClassId() == null && query.getGradeId() != null) ){
			homeworkList = homeworkService.findProvostHomeworkList(query, page);
		}
		page.setDataList(homeworkList);
		json.addDatas("page", page);
		return json;
	}
	/**
	 * 教务：作业管家详情数据
	 */
	@RequestMapping("provost/homework/manager/homeworkDetail")
	@ResponseBody
	public JsonResult provostManagerHomeworkDetail(Integer subjectId,Long gradeId,Integer homeworkType,Page page) {
		JsonResult json = new JsonResult();
		ClassHomeworkQuery query = new ClassHomeworkQuery();
		query.setHomeworkType(homeworkType);
		query.setSubjectId(subjectId);
		query.setGradeId(gradeId);
		query.setSchoolId(UserContext.user.getCurrentSchoolId());
		query.setStartTime(DiagHelp.getSemesterStarDate());
		List<HomeworkDTO> homeworkList = new ArrayList<HomeworkDTO>();
		setQueryClassId(query);
		if(!(query.getClassId() == null && query.getGradeId() != null) ){
			homeworkList = homeworkService.findProvostHomeworkList(query, page);
		}
		page.setDataList(homeworkList);
		json.addDatas("page", page);
		return json;
	}
	
	
	/**
	 * 家长：作业管家
	 */
	@RequestMapping("parent/homework/managerDetail")
	@ResponseBody
	public JsonResult parentManager(Long id){
		Long studentId = id;
		List<SubjectHwStatistics> list = homeworkDtlService.findStudentSubjectHwStatisticsList(studentId,false);
		List<SubjectHwStatisticsExtend> extendList = list.stream().map(v->{
			SubjectHwStatisticsExtend extend = new SubjectHwStatisticsExtend();
			BeanUtils.copyProperties(extend, v);
			extend.setKemu(Kemu.getKemu(extend.getSubjectId()));
			return extend;
		}).collect(Collectors.toList());
		JsonResult result = new JsonResult();
		result.addDatas("subjectList", extendList);
		return result;
	}
	
	/**
	 * 班主任：作业管家
	 */
	@RequestMapping("classTeacher/homework/managerDetail")
	@ResponseBody
	public JsonResult classTeacherManager(Long id){
		Long classId = id;
		List<Subject> list = this.homeworkService.findOrganClassSubject(classId);
		List<SubjectExtend> extendList = list.stream().map(v->{
			SubjectExtend extend = new SubjectExtend();
			BeanUtils.copyProperties(extend, v);
			extend.setKemu(Kemu.getKemu(extend.getSubjectId()));
			return extend;
		}).collect(Collectors.toList());
		JsonResult result = new JsonResult();
		result.addDatas("subjectList", extendList);
		return result;
	}
	
	/**
	 * 根据年级设置班级Id集合
	 * @param query
	 */
	private void setQueryClassId(ClassHomeworkQuery query) {
		if (query.getClassId() != null && query.getClassId().size() > 0) {
			return;
		} else {
			Long gradeId = query.getGradeId();
			if (gradeId == null) {
				query.setClassId(null);
			} else {
				ClazzQuery clazzQuery = new ClazzQuery();
				clazzQuery.setGradeId(query.getGradeId());
				clazzQuery.setType(query.getClassType());
				List<Clazz> clazzs = getGradeClazz(clazzQuery);
				if(clazzs != null && clazzs.size()>0){
					query.setClassId(clazzs.stream().map(c -> c.getClassId()).collect(Collectors.toList()));
				}else{
					query.setClassId(null);
				}
			}
		}
	}
	
	private List<Clazz> getGradeClazz(ClazzQuery query){
		User user = UserContext.user.get();
		query.setUserId(user.getId());
		query.setRoleId(user.getCurrentRole().getId());
		query.setSchoolId(user.getCurrentSchool().getId());
		return this.klassRemoteService.findClazzByQuery(query);
	}
}
