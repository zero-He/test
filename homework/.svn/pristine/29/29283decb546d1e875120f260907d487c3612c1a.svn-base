package cn.strong.leke.homework.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.common.utils.DateUtils;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.homework.dao.mongo.HomeworkPaperDao;
import cn.strong.leke.homework.dao.mybatis.HanWangDao;
import cn.strong.leke.homework.dao.mybatis.HomeworkDao;
import cn.strong.leke.homework.dao.mybatis.HomeworkDtlDao;
import cn.strong.leke.homework.manage.WorkDetailService;
import cn.strong.leke.homework.model.ApiStudentHomeworkListDTO;
import cn.strong.leke.homework.model.HanWang;
import cn.strong.leke.homework.model.Homework;
import cn.strong.leke.homework.model.HomeworkDtl;
import cn.strong.leke.homework.model.HomeworkDtlDTO;
import cn.strong.leke.homework.model.HomeworkDtlInfo;
import cn.strong.leke.homework.model.HomeworkDtlQuery;
import cn.strong.leke.homework.model.HomeworkPaper;
import cn.strong.leke.homework.model.MyHomeworkDTO;
import cn.strong.leke.homework.model.StuHwByDayDTO;
import cn.strong.leke.homework.model.StuSubjRes;
import cn.strong.leke.homework.model.StudentAvgScore;
import cn.strong.leke.homework.model.SubjectHwStatistics;
import cn.strong.leke.homework.model.WorkDetail;
import cn.strong.leke.homework.model.query.ApiParamForStuHomework;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.model.common.StuTreeModel;
import cn.strong.leke.model.user.UserBase;

@Service("homeworkDtlService")
public class HomeworkDtlServiceImpl implements HomeworkDtlService {

	@Resource
	private HanWangDao hanWangDao;
	@Resource
	private HomeworkDao homeworkDao;
	@Resource
	private HomeworkDtlDao homeworkDtlDao;
	@Resource
	private HomeworkPaperDao homeworkPaperDao;
	@Resource
	private WorkDetailService workDetailService;

	@Override
	public void saveHomeworkDtl(Homework homework, List<StuTreeModel> stuList) {
		homeworkDtlDao.insertHomeworkDtl(stuList, homework);
	}

	@Override
	public void saveHomeworkDtlForBind(Homework homework, List<UserBase> userList) {
		homeworkDtlDao.insertHomeworkDtlForBind(userList, homework);
	}

	@Override
	public List<HomeworkDtlDTO> findHomeworkDtlList(Long homeworkId,String stuName) {
		return homeworkDtlDao.queryHomeworkDtlList(homeworkId,stuName);
	}

	@Override
	public List<HomeworkDtlDTO> getHwDtl(Long homeworkId) {
		return homeworkDtlDao.queryHwDtl(homeworkId);
	}

	@Override
	@SuppressWarnings("deprecation")
	public List<MyHomeworkDTO> getMyHomeworkList(HomeworkDtlQuery homeworkDtlQuery, Page page) {
		if (homeworkDtlQuery.getCloseEndTime() != null) {
			homeworkDtlQuery.setCloseEndTime(DateUtils.toDayEndTime(homeworkDtlQuery.getCloseEndTime()));
		}
		return homeworkDtlDao.getMyHomeworkList(homeworkDtlQuery, page);
	}

	@Override
	public HomeworkDtl getHomeworkDtlById(Long homeworkDtlId) {
		return this.homeworkDtlDao.getHomeworkDtlById(homeworkDtlId);
	}

	@Override
	public void updateHomeworkDtl(HomeworkDtl homeworkDtl) {
		this.homeworkDtlDao.updateHomeworkDtl(homeworkDtl);
	}

	@Override
	public List<HomeworkDtl> findHomeworkDtlListByHomeworkId(Long homeworkId) {
		return homeworkDtlDao.findHomeworkDtlListByHomeworkId(homeworkId);
	}

	@Override
	public Map<String, Integer> queryHwNum(Long teacherId) {
		return homeworkDtlDao.queryHwNum(teacherId);
	}

	@Override
	public List<StuHwByDayDTO> queryStuHwByDayList(Long studentId, String day) {
		Date headTime = DateUtils.parseDate(day, DateUtils.SHORT_DATE_PATTERN);
		Date tailTime = DateUtils.addDays(headTime, 1);
		return homeworkDtlDao.queryStuHwByDay(studentId, headTime, tailTime);
	}

	@Override
	public List<StuHwByDayDTO> findStuHomeworkList(HomeworkDtlQuery query) {
		return this.homeworkDtlDao.findStuHomeworkList(query);
	}

	@Override
	public StuHwByDayDTO getStuHomeworkByHomeworkDtlId(Long homeworkDtlId) {
		return this.homeworkDtlDao.getStuHomeworkByHomeworkDtlId(homeworkDtlId);
	}

	public StuHwByDayDTO getStuHomeworkByHomeworkIdAndStudentId(Long homeworkId, Long studentId) {
		return this.homeworkDtlDao.getStuHomeworkByHomeworkIdAndStudentId(homeworkId, studentId);
	}

	@Override
	public Long getPrevHomeworkId(Long homeworkId, Long homeworkDtlId) {
		return this.homeworkDtlDao.getPrevHomeworkId(homeworkId, homeworkDtlId);
	}

	@Override
	public Long getNextHomeworkId(Long homeworkId, Long homeworkDtlId) {
		return this.homeworkDtlDao.getNextHomeworkId(homeworkId, homeworkDtlId);
	}

	@Override
	public Long getNextCorrectHomeworkId(Long homeworkId) {
		return this.homeworkDtlDao.getNextCorrectHomeworkId(homeworkId);
	}

	@Override
	public Long getNextReviewHomeworkId(Long homeworkId) {
		return this.homeworkDtlDao.getNextReviewHomeworkId(homeworkId);
	}

	@Override
	public HomeworkDtl getHomeworkDtlByHomeworkIdAndStudentId(Long homeworkId, Long studentId) {
		return this.homeworkDtlDao.getHomeworkDtlByHomeworkIdAndStudentId(homeworkId, studentId);
	}

/*	@Override
	public List<StuSubjRes> findStuSubjResByStudentId(Long studentId) {
		return this.homeworkDtlDao.findStuSubjResByStudentId(studentId,null);
	}*/
	@Override
	public List<StuSubjRes> findStuSubjResByStudentId(Long studentId,Long subjectId,Date startDate) {
		return this.homeworkDtlDao.findStuSubjResByStudentId(studentId,subjectId,startDate);
	}

	@Override
	public Integer getRankByHomeworkIdAndScore(Long homeworkId, BigDecimal score) {
		return this.homeworkDtlDao.getRankByHomeworkIdAndScore(homeworkId, score);
	}

	@Override
	public void saveHanWang(HanWang hanWang) {
		this.hanWangDao.saveHanWang(hanWang);
	}

	@Override
	public HanWang getHanWangById(Long id) {
		return this.hanWangDao.getHanWangById(id);
	}

	@Override
	public List<SubjectHwStatistics> getSubjectHomeworkInfo(Long studentId) {
		return homeworkDtlDao.getSubjectHomeworkInfo(studentId);
	}

	@Override
	public List<Map<String, Long>> findSubmitHomeworkDtls(Long homeworkId) {
		return homeworkDtlDao.findSubmitHomeworkDtls(homeworkId);
	}

	@Override
	public List<ApiStudentHomeworkListDTO> findStuHomeworkList_v1(ApiParamForStuHomework query) {
		return homeworkDtlDao.findStuHomeworkList_v1(query);
	}

	@Override
	public List<HomeworkDtl> findHomeworkDtlByHomeworkIdAndStudentName(Long homeworkId, String studentName, Page page) {
		return this.homeworkDtlDao.findHomeworkDtlByHomeworkIdAndStudentName(homeworkId, studentName, page);
	}

	@Override
	public List<SubjectHwStatistics> findStudentSubjectHwStatisticsList(Long studentId,Boolean filter) {
		List<SubjectHwStatistics> subjectHomeworks = getSubjectHomeworkInfo(studentId);
		//移除待批改和待订正都是零的
		if(filter){
			subjectHomeworks = subjectHomeworks.stream().filter(s -> {
				return s.getBugFixNum() > 0 || s.getUnfinishNum() > 0;
			}).collect(Collectors.toList());
		}
		//分组排序
		Map<Long, List<SubjectHwStatistics>> map = subjectHomeworks.stream().collect(
				Collectors.groupingBy(SubjectHwStatistics::getSubjectId));
		List<SubjectHwStatistics> list = new ArrayList<SubjectHwStatistics>();
		map.keySet().forEach(
				k -> {
					SubjectHwStatistics item = new SubjectHwStatistics();
					item.setSubjectId(k);
					item.setSubjectName(map.get(k).get(0).getSubjectName());
					item.setBugFixNum(map.get(k).stream()
							.collect(Collectors.summarizingLong(SubjectHwStatistics::getBugFixNum)).getSum());
					item.setUnfinishNum(map.get(k).stream()
							.collect(Collectors.summarizingLong(SubjectHwStatistics::getUnfinishNum)).getSum());
					list.add(item);
				});
		list.sort((a, b) -> a.getSubjectId().compareTo(b.getSubjectId()));
		return list;
	}

	@Override
	public List<StudentAvgScore> findStudentAvgScoreByCourseSingleId(Long courseSingleId) {
		return this.homeworkDtlDao.findStudentAvgScoreByCourseSingleId(courseSingleId);
	}

	@Override
	public List<HomeworkPaper> findHomeworkPaper(List<String> paperIds) {
		return homeworkPaperDao.findHwPaperList(paperIds);
	}

	@Override
	public HomeworkPaper getHomeworkPaper(String paperId) {
		return this.homeworkPaperDao.getByPaperId(paperId);
	}

	@Override
	public HomeworkDtlInfo getHomeworkDtlInfoById(Long homeworkDtlId) {
		return this.homeworkDtlDao.getHomeworkDtlInfoById(homeworkDtlId);
	}
	
	@Override
	public List<MyHomeworkDTO> findHomeworkDtlByIds(List<Long> homeworkDtlIds) {
		return this.homeworkDtlDao.findHomeworkDtlByIds(homeworkDtlIds);
	}

	@Override
	public void executeForHwdtlErrorTotal() {
		Long minId = 0L;
		Long errorTotal = 0L;
		while (true) {
		 List<Long> list=	this.homeworkDtlDao.findHwdtlIdsForErrorTotal(minId);
		 for (Long homeworkDtlId : list) {
			WorkDetail workDetail = workDetailService.getWorkDetailByHomeworkDtlId(homeworkDtlId);
			if(workDetail != null){
				errorTotal = workDetail.getQuestions().stream().filter(v->Boolean.FALSE.equals(v.getTotalIsRight())).count();
			}else{
				errorTotal = 0L;
			}
			this.homeworkDtlDao.updateErrorTotal(errorTotal, homeworkDtlId);
		 }
		 
		 if(CollectionUtils.isEmpty(list) || list.size() < 10000L){
			 return;
		 }
		 minId = list.get(list.size() -1);
		}
		
	}
}
