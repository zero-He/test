package cn.strong.leke.homework.util;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFComment;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPatriarch;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.strong.leke.core.office.ExportExcelForTable;
import cn.strong.leke.framework.exceptions.LekeRuntimeException;

public class ExportExcel<T> {

	private static final Logger logger = LoggerFactory.getLogger(ExportExcelForTable.class);

	private String title;
	private String[] headers;
	private ValueGet<T> function;

	/**
	 *	
	 * 描述:导出Excel文档 （含图片）
	 *
	 * @author  WQB
	 * @created 2014-5-14 下午3:05:29
	 * @since   v1.0.0 
	 * @param title sheet的标题名
	 * @param headers 表格属性列名数组
	 * @param dataset  需要显示的数据集合,集合中一定要放置符合javabean风格的类的对象。此方法支持的 javabean属性的数据类型有基本数据类型及String,Date,byte[](图片数据)
	 * @param out 与输出设备关联的流对象，可以将EXCEL文档导出到本地文件或者网络中
	 * @return  void
	 */
	public ExportExcel(String title, String[] headers,ValueGet<T> function) {
		this.title = title;
		this.headers = headers;
		this.function = function;
	}

	public void export(Collection<T> dataset,OutputStream out) {
		//声明一个工作薄。注：HSSFWorkbook为xls文件，XSSFWorkbook为xlsx文件。
		HSSFWorkbook workbook = new HSSFWorkbook();
		//生成一个表格
		HSSFSheet sheet = workbook.createSheet(title);
		//设置表格默认列宽度为15个字节
		sheet.setDefaultColumnWidth(15);
		//生成一个样式
		HSSFCellStyle style = workbook.createCellStyle();
		//设置这些样式
		style.setFillForegroundColor(HSSFColor.SKY_BLUE.index);
		style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		//生成一个字体
		HSSFFont font = workbook.createFont();
		font.setColor(HSSFColor.VIOLET.index);
		font.setFontHeightInPoints((short) 12);
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		//把字体应用到当前的样式
		style.setFont(font);
		//生成并设置另一个样式
		HSSFCellStyle style2 = workbook.createCellStyle();
		style2.setFillForegroundColor(HSSFColor.WHITE.index);
		style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);
		style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);
		style2.setBorderRight(HSSFCellStyle.BORDER_THIN);
		style2.setBorderTop(HSSFCellStyle.BORDER_THIN);
		style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		//生成另一个字体
		HSSFFont font2 = workbook.createFont();
		font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);
		//把字体应用到当前的样式
		style2.setFont(font2);

		//生成字体
		HSSFFont font3 = workbook.createFont();
		//font3.setColor(HSSFColor.BLUE.index);

		//声明一个画图的顶级管理器
		HSSFPatriarch patriarch = sheet.createDrawingPatriarch();
		//定义注释的大小和位置,详见文档
		HSSFComment comment = patriarch.createComment(new HSSFClientAnchor(0, 0, 0, 0, (short) 4, 2, (short) 6, 5));
		//设置注释内容
		comment.setString(new HSSFRichTextString("可以在POI中添加注释！"));
		//设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.
		comment.setAuthor("leno");

		//产生表格标题行
		HSSFRow row = sheet.createRow(0);
		for (int i = 0; i < headers.length; i++) {
			HSSFCell cell = row.createCell(i);
			cell.setCellStyle(style);
			HSSFRichTextString text = new HSSFRichTextString(headers[i]);
			cell.setCellValue(text);
		}

		//遍历集合数据，产生数据行
		Iterator<T> it = dataset.iterator();
		int index = 0;
		while (it.hasNext()) {
			index++;
			row = sheet.createRow(index);
			T t = (T) it.next();
			for (int i = 0; i < headers.length; i++) {
				HSSFCell cell = row.createCell(i);
				cell.setCellStyle(style2);
				Object value = function.get(t, i);
				//判断值的类型后进行强制类型转换
				String textValue = null != value ? value.toString() : null;
				//如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成
				if (textValue != null) {
					Pattern p = Pattern.compile("^//d+(//.//d+)?{1}");
					Matcher matcher = p.matcher(textValue);
					if (matcher.matches()) {
						//是数字当作double处理
						cell.setCellValue(Double.parseDouble(textValue));
					} else {
						HSSFRichTextString richString = new HSSFRichTextString(textValue);
						richString.applyFont(font3);
						cell.setCellValue(richString);
					}
				}
			}

		}
		try {
			workbook.write(out);
		} catch (IOException e) {
			logger.error("IO error when write workbook", e);
			throw new LekeRuntimeException("IO error when write workbook", e);
		} finally {
			try {
				workbook.close();
			} catch (IOException e) {
				logger.error("IO error when close workbook", e);
				throw new LekeRuntimeException("IO error when close workbook", e);
			}
		}
	}
	@FunctionalInterface
	public interface ValueGet<T> {
		Object get(T t, int i);
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String[] getHeaders() {
		return headers;
	}

	public void setHeaders(String[] headers) {
		this.headers = headers;
	}

	public ValueGet getFunction() {
		return function;
	}

	public void setFunction(ValueGet function) {
		this.function = function;
	}
	
}
