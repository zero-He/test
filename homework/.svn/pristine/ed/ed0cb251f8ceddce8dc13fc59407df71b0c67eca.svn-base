package cn.strong.leke.homework.controller;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import cn.strong.leke.beike.model.Microcourse;
import cn.strong.leke.beike.model.MicrocourseFile;
import cn.strong.leke.beike.model.Types;
import cn.strong.leke.common.serialize.support.json.JsonUtils;
import cn.strong.leke.context.user.UserContext;
import cn.strong.leke.framework.exceptions.ValidateException;
import cn.strong.leke.framework.exceptions.Validation;
import cn.strong.leke.framework.web.JsonResult;
import cn.strong.leke.homework.service.HomeworkConfigService;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.lesson.model.TeachSubj;
import cn.strong.leke.model.base.Clazz;
import cn.strong.leke.model.user.User;
import cn.strong.leke.remote.service.beike.IBeikeRemoteService;
import cn.strong.leke.remote.service.lesson.IKlassRemoteService;
import cn.strong.leke.remote.service.microcourse.IMicrocourseRemoteService;

@Controller
@RequestMapping(value = { "/auth/*" })
public class HDVacationWorkControler {

	@Resource
	private IKlassRemoteService iKlassRemoteService;
	
	@Resource
	private HomeworkConfigService homeworkConfigService;
	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private IBeikeRemoteService iBeikeRemoteService;
	@Resource
	private IMicrocourseRemoteService iMicrocourseRemoteService;
	
	// 学生：作业和微课列表 寒假
	@RequestMapping(value = "hd/student/vacationWork/StudentWorkList")
	public String StudentWorkList() {
		if(!homeworkConfigService.HasConfig())
			return "/auth/hd/vacationWork/noConfig";
		return "/auth/hd/vacationWork/StuWorkList";
	}

	// 学生：学科-作业列表
	@RequestMapping(value = "hd/student/vacationWork/StuDecList")
	public String StuDecList(String workId,String title,Map<String, Object> map) {
		map.put("workId", workId);
		map.put("title",title);
		map.put("type", 1);
		return "/auth/hd/vacationWork/StuDecList";
	}

	// 学生：微课-作业列表
	@RequestMapping(value = "hd/student/vacationWork/StuWkList")
	public String StuWkList(String workId,String title,Long subjectId,String subjectName,Map<String, Object> map) {
		map.put("workId", workId);
		map.put("title",title);
		map.put("subjectId",subjectId);
		map.put("subjectName",subjectName);
		map.put("type", 2);
		return "/auth/hd/vacationWork/StuWkList";
	}
	
	// 学生：微课学习
		@RequestMapping(value = "hd/student/vacationWork/WkStudy")
		public String WkStudy(Model model,String id,Long microcourseId) throws UnsupportedEncodingException{
			Microcourse microcourse = iBeikeRemoteService.getMicrocourseById(microcourseId);
			MicrocourseFile microcourseFile = iMicrocourseRemoteService.getMicrocourseFileById(microcourseId);// microcourseFileHandler.getByMicrocourseId(microcourseId);
//			MicrocourseDTO dto = microcourseQueryService.getById(microcourseId);
			Validation.isPageNotFound(microcourse == null);
			Validation.isPageNotFound(microcourseFile == null);
			User user = UserContext.user.get();
			String microcourseName = microcourse.getMicrocourseName();
			model.addAttribute("holidayId",id);
			model.addAttribute("microcourse", microcourse);
			model.addAttribute("microcourseFile", microcourseFile);
			model.addAttribute("title", URLEncoder.encode(URLEncoder.encode(microcourseName, "UTF-8"), "UTF-8"));
			model.addAttribute("userId", user.getId());
			model.addAttribute("isMedia", Types.isMedia(microcourseFile.getType()));
			model.addAttribute("type", Types.valueOf(microcourseFile.getType()));
//			model.addAttribute("resourceId", resourceId);
			model.addAttribute("microcourseName", HtmlUtils.htmlEscape(microcourseName));
			model.addAttribute("initJson", JsonUtils.toJSON(microcourse));
//			model.addAttribute("knowledges", dto.getKnowledges());
			model.addAttribute("schoolstageSubject", microcourse.getSchoolStageName() + microcourse.getSubjectName());
			/*RateResource rate = rateResourceRemoteService.getRateResource(microcourseId, ResourceTypes.MICROCOURSE);
			Integer scoreStr = 0;
			if (rate != null) {
				scoreStr = Math.round(rate.getTotalScore() / rate.getCommentCount()) * 20;
			}
			model.addAttribute("rate", rate);
			model.addAttribute("scoreStr", scoreStr);*/
			return "/auth/hd/vacationWork/WkStudy";
		}
	
	
	

	// 老师：作业和微课列表
	@RequestMapping(value = "hd/teacher/vacationWork/TeacherWorkList")
	public String TchWorkList() {

		if(!homeworkConfigService.HasConfig())
			return "/auth/hd/vacationWork/noConfig";
		return "/auth/hd/vacationWork/TchWorkList";
	}

	// 老师：学科-作业列表
	@RequestMapping(value = "hd/teacher/vacationWork/TchDecList")
	public String TchDecList(String workId,String title, Map<String, Object> map) {
		
		map.put("workId", workId);
		map.put("title",title);
		map.put("type", 1);
		return "/auth/hd/vacationWork/TchDecList";
	}

	// 老师：微课作业列表
	@RequestMapping(value = "hd/teacher/vacationWork/TchWkList")
	public String TchWkList(String workId,String title,Long subjectId,String subjectName, Map<String, Object> map) {
		
		map.put("workId", workId);
		map.put("title",title);
		map.put("subjectId",subjectId);
		map.put("subjectName",subjectName);
		map.put("type", 2);
		return "/auth/hd/vacationWork/TchWkList";
	}
	
	@RequestMapping(value = {"hd/teacher/vacationWork/tchSubjList"}, method = RequestMethod.POST)
	@ResponseBody
	public JsonResult vacationHomeworkList(Long classId,Long subjectId) {
		JsonResult json =new JsonResult();
		User user = UserContext.user.get();
		Long userId = user.getId();
		Long schoolId = user.getCurrentSchool().getId();

		List<TeachSubj> teachSubj = iKlassRemoteService.findTeachSubjByUserId(userId,schoolId);
		teachSubj.sort(new Comparator<TeachSubj>(){
            public int compare(TeachSubj arg0, TeachSubj arg1) {
                return arg0.getSubjectId().compareTo(arg1.getSubjectId());
            }
        });
		
		if(teachSubj==null||teachSubj.size()<1){
			
			throw new ValidateException("请先绑定学科和班级。");
		}
		for(TeachSubj ts : teachSubj){
			List<Clazz> clazzList = ts.getClazzList();
			if(clazzList.size()==0){
				Clazz clazz = new Clazz();
				
				clazz.setClassId(-1l);
				clazz.setClassName("没有绑定学科班级");
				clazzList.add(clazz);
			}
			clazzList.sort(new Comparator<Clazz>(){
	            public int compare(Clazz arg0, Clazz arg1) {
	                return arg0.getClassId().compareTo(arg1.getClassId());
	            }
	        });
		}
		
		json.addDatas("dataList", teachSubj);
		return json;
	}
	

}
