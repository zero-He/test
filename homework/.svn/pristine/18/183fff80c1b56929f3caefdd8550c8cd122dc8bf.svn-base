package cn.strong.leke.homework.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.strong.leke.common.utils.StringUtils;
import cn.strong.leke.context.user.UserContext;
import cn.strong.leke.core.office.ExportExcelForTable;
import cn.strong.leke.framework.exceptions.ValidateException;
import cn.strong.leke.framework.web.JsonResult;
import cn.strong.leke.homework.model.Homework;
import cn.strong.leke.homework.service.HomeworkStatusExportService;

@Controller
@RequestMapping(value = {"/auth/classTeacher/homework/*","/auth/provost/homework/*"})
public class HomeworkStatusExportController {
	
	@Resource
	private HomeworkStatusExportService homeworkStatusExportService;
	/**
	 * 页面入口
	 */
	@RequestMapping("homeworkSubmitStatusDetail")
	public String homeworkSubmitStatusDetail(Model model) {
		return "/auth/classTeacher/homework/homeworkSubmitStatusDetail";
	}
	
	@RequestMapping("detail")
	@ResponseBody
	public JsonResult detail(Long classId) {
		Long schoolId = UserContext.user.getCurrentSchoolId();
		List<Map<String, Object>> export = homeworkStatusExportService.getStatusData(classId,schoolId, false);
		List<Homework> homeWorkList = homeworkStatusExportService.getHomeWork(classId,schoolId);
		List<String> headersList = new ArrayList<String>();
		headersList.add("学生姓名");
		headersList.addAll(homeWorkList.stream().map(v->{return v.getHomeworkName();}).collect(Collectors.toList()));
		List<String> fieldNameList = new ArrayList<String>();
		fieldNameList.add(HomeworkStatusExportService.STUDENT_NAME);
		fieldNameList.addAll(homeWorkList.stream().map(v->{return String.valueOf(v.getHomeworkId());}).collect(Collectors.toList()));
		String[] fieldNames = fieldNameList.toArray(new String[0]);
		String[] headers = headersList.toArray(new String[0]);
		JsonResult result = new JsonResult();
		result.addDatas("export", export);
		result.addDatas("fieldNames", fieldNames);
		result.addDatas("headers", headers);
		return result;
	}
	
	@RequestMapping("export")
	public void export(Long classId, HttpServletRequest request, HttpServletResponse response) throws IOException {
		Long schoolId = UserContext.user.getCurrentSchoolId();
		List<Map<String, Object>> export = homeworkStatusExportService.getStatusData(classId,schoolId, true);
		if(export==null){
			throw new ValidateException("没有数据");
		}
		List<Homework> homeWorkList = homeworkStatusExportService.getHomeWork(classId,schoolId);
		List<String> headersList = new ArrayList<String>();
		headersList.add("学生姓名");
		headersList.addAll(homeWorkList.stream().map(v->{return v.getHomeworkName();}).collect(Collectors.toList()));
		List<String> fieldNameList = new ArrayList<String>();
		fieldNameList.add(HomeworkStatusExportService.STUDENT_NAME);
		fieldNameList.addAll(homeWorkList.stream().map(v->{return String.valueOf(v.getHomeworkId());}).collect(Collectors.toList()));
		String[] fieldNames = fieldNameList.toArray(new String[0]);
		String[] headers = headersList.toArray(new String[0]);
		String title = homeWorkList.get(0).getClassName();
		response.setCharacterEncoding("UTF-8");
		response.setContentType("application/octet-stream;charset=UTF-8");
		String agent = request.getHeader("user-agent");
		String fileName = getEncodingFileName(title + ".xls", agent);
		response.setHeader("Content-disposition", "attachment;" + fileName);
		new ExportExcelForTable<Map<String, Object>>().exportExcel(title, headers, fieldNames, export, response.getOutputStream(), null);
	}
	
	private static String getEncodingFileName(String fileName, String userAgent) {
		String name = null;
		try {
			name = URLEncoder.encode(fileName, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			name = fileName;
		}
		if (StringUtils.isNotEmpty(userAgent)) {
			userAgent = userAgent.toLowerCase();
			if (userAgent.indexOf("opera") != -1) {
				name = "filename*=UTF-8''" + name;
			} else if (userAgent.indexOf("msie") != -1 || (userAgent.indexOf("rv:") != -1 && userAgent.indexOf("firefox") == -1)) {
				name = "filename=\"" + name + "\"";
			} else if (userAgent.indexOf("mozilla") != -1) {
				try {
					name = "filename=\"" + new String(fileName.getBytes("UTF-8"), "ISO-8859-1") + "\"";
				} catch (UnsupportedEncodingException e) {
					name = "filename=\"" + name + "\"";
				}
			} else {
				name = "\"filename=" + name + "\"";
			}
		} else {
			name = "\"filename=" + name + "\"";
		}
		return name;
	}
}
