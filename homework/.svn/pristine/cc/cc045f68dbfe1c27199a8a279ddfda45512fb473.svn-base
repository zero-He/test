package cn.strong.leke.homework.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.context.base.UserBaseContext;
import cn.strong.leke.context.question.QuestionContext;
import cn.strong.leke.context.user.UserContext;
import cn.strong.leke.context.user.cst.RoleCst;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.framework.web.JsonResult;
import cn.strong.leke.homework.manage.ExerciseService;
import cn.strong.leke.homework.manage.HolidayHwMicroService;
import cn.strong.leke.homework.model.AnswerInfo;
import cn.strong.leke.homework.model.ExerciseType;
import cn.strong.leke.homework.model.HolidayMatNode;
import cn.strong.leke.homework.model.MyHomeworkDTO;
import cn.strong.leke.homework.model.mongo.Exercise;
import cn.strong.leke.homework.model.mongo.HolidayHwMicro;
import cn.strong.leke.homework.model.mongo.HolidayMicrocourse;
import cn.strong.leke.homework.model.mongo.KnoledgeNode;
import cn.strong.leke.homework.model.mongo.MatNode;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.homework.util.AnswerUtils;
import cn.strong.leke.homework.util.CommUtils;
import cn.strong.leke.model.question.QuestionDTO;
import cn.strong.leke.model.question.querys.QuestionSelectQuery;
import cn.strong.leke.model.user.User;
import cn.strong.leke.model.user.UserBase;
import cn.strong.leke.remote.service.question.IKnowledgeRemoteService;
import cn.strong.leke.remote.service.question.IQuestionSelectRemoteService;

/**
 * 寒暑假假期作业 ajax data
 * @author Zhang Fujun
 * @date 2016年12月15日
 */
@RestController
@RequestMapping(value = { "/auth/common/holiday/*", "/auth/hd/common/holiday/*" })
public class HolidayHwDataController {

	@Resource
	private HolidayHwMicroService holidayHwService;
	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private ExerciseService exerciseService;
	@Resource
	private IQuestionSelectRemoteService questionSelectRemoteService;
	@Resource
	private IKnowledgeRemoteService knowledgeRemoteService;

	/**
	 * 获取学生的作业或微课列表
	 * @param type 1：作业，2：微课
	 * @return
	 */
	@RequestMapping("ajax/loadListByStudent")
	public JsonResult loadListByStudent(Long studentId, Integer type, Page page) {
		if(RoleCst.STUDENT.equals(UserContext.user.getCurrentRoleId())){
			studentId = UserContext.user.getUserId();
		}
		JsonResult jsonResult = new JsonResult();
		List<HolidayHwMicro> list = this.holidayHwService.findStuHolidayHomeworks(studentId, type, page);
		page.setDataList(list);
		jsonResult.addDatas("page", page);
		return jsonResult;
	}

	/**
	 * 获取学生的作业或微课列表
	 * @param type 1：作业，2：微课
	 * 不做分页
	 * @return
	 */
	@RequestMapping("ajax/loadListByClass")
	public JsonResult loadListByClass(Long subjectId, Long classId, Page page, HttpServletRequest request) {
		JsonResult jsonResult = new JsonResult();
		List<HolidayHwMicro> list = this.holidayHwService.findClassHolidayHomeworks(subjectId, classId, page);
		for(HolidayHwMicro hhm : list){
			hhm.setUserName(UserBaseContext.getUserBaseByUserId(hhm.getUserId()).getUserName());
		}
		page.setDataList(list);
		jsonResult.addDatas("page", page);
		HashMap<Long,String> photoURL = new HashMap<Long, String>();
		list.stream().forEach(v->{
			UserBase ubase = UserBaseContext.getUserBaseByUserId(v.getUserId());
			String photoSrc= CommUtils.getAbsolutePhoto(ubase.getPhoto(), ubase.getSex(), request);
			photoURL.put(v.getUserId(), photoSrc);
			
		});
		jsonResult.addDatas("userPhoto", photoURL);
		return jsonResult;
	}

	/**
	 * 返回学生寒假某个学科的作业或微课概要信息
	 * @param id
	 * @return
	 */
	@RequestMapping("ajax/getHolidayHwMicroSummary")
	public JsonResult getHolidayHwMicroSummary(String id) {
		JsonResult jsonResult = new JsonResult();
		HolidayHwMicro holidayHomework = this.holidayHwService.getSingleHolidayHomework(id);
		/*Long userId = UserContext.user.getUserId();
		Validation.isPageNotFound(userId != holidayHomework.getUserId());*/
		jsonResult.addDatas("summary", holidayHomework);
		return jsonResult;
	}
	

	/**
	 * 返回学生寒假某个学科的作业列表
	 * @param id
	 * @return
	 */
	@RequestMapping("ajax/getStuSubjectHomeworkInfo")
	public JsonResult getStuSubjectHomeworkInfo(String id, Page page) {
		JsonResult jsonResult = new JsonResult();
		HolidayHwMicro holidayHomework = this.holidayHwService.getSingleHolidayHomework(id);
		/*Long userId = UserContext.user.getUserId();
		Validation.isPageNotFound(userId != holidayHomework.getUserId());*/
		List<Long> homeworkDtlIds = holidayHomework.getHomeworkDtlIds();
		if(homeworkDtlIds==null){
			page.setTotalSize(0);
			page.setDataList(new ArrayList<MyHomeworkDTO>());
			jsonResult.addDatas("page", page);
			return jsonResult;
		}else{
			page.setTotalSize(homeworkDtlIds.size());
			homeworkDtlIds = homeworkDtlIds.stream().skip(page.getOffset()).limit(page.getLimit()).collect(Collectors.toList());
			if(homeworkDtlIds.size() > 0){
				List<MyHomeworkDTO> homeworkList = homeworkDtlService.findHomeworkDtlByIds(homeworkDtlIds);
				page.setDataList(homeworkList);
			}
			jsonResult.addDatas("page", page);
			return jsonResult;
		}
		
	}
	
	/**
	 * 返回学生寒假某个学科的微课列表
	 * @param id
	 * @return
	 */
	@RequestMapping("ajax/getStuSubjectMicroInfos")
	public JsonResult getStuSubjectMicroInfos(String id, Page page) {
		JsonResult jsonResult = new JsonResult();
		HolidayHwMicro holidayHomework = this.holidayHwService.getSingleHolidayHomework(id);
		List<HolidayMatNode> dataList = convertToMatNodes(holidayHomework, page);
		page.setDataList(dataList);
		jsonResult.addDatas("page", page);
		return jsonResult;
	}
	
	/**
	 * 已经学习的微课，更新状态
	 * @param id
	 * @return
	 */
	@RequestMapping("ajax/updateMicroState")
	public JsonResult updateMicroState(String id, Long microId) {
		if(RoleCst.STUDENT.equals( UserContext.user.getCurrentRoleId())){
			HolidayHwMicro holidayHwMicro = this.holidayHwService.getSingleHolidayHomework(id);
			Optional<HolidayMicrocourse> first= holidayHwMicro.getMicrocourses().stream().filter(v->v.getMicroId().equals(microId)).findFirst();
			if(first.isPresent() && holidayHwMicro.getUserId().equals(UserContext.user.getUserId())){
				this.holidayHwService.updateMicroState(id, microId,first.get().getMicroState() == 0);
			}
		}
		return new JsonResult();
	}
	
	private List<HolidayMatNode> convertToMatNodes(HolidayHwMicro holidayHomework, Page page) {
		List<HolidayMatNode> list = new ArrayList<HolidayMatNode>();
		List<HolidayMicrocourse> microcourses = holidayHomework.getMicrocourses();
		page.setTotalSize(microcourses.size());
		microcourses = microcourses.stream().skip(page.getOffset()).limit(page.getLimit()).collect(Collectors.toList());
		for (HolidayMicrocourse mic : microcourses) {
			HolidayMatNode node = new HolidayMatNode();
			MatNode matNode = holidayHomework.getMatNodes().stream().filter(v->v.getNodeId().equals(mic.getMatNodeId())).findFirst().get();
			node.setMatNodeId(matNode.getNodeId());
			node.setMatNodeName(matNode.getNodeName());
			KnoledgeNode knoledgeNode = matNode.getKnoledageNodes().stream().filter(v->v.getkId().equals(mic.getKnowledgId())).findFirst().get();
			node.setkId(knoledgeNode.getkId());
			node.setkName(knoledgeNode.getkName());
			HolidayMicrocourse microcourse = microcourses
					.stream()
					.filter(v -> v.getKnowledgId().equals(knoledgeNode.getkId())
							&& v.getMatNodeId().equals(matNode.getNodeId())).findFirst().get();
			node.setMicroHwState(microcourse.getAccuracy() != null ? 1 : 0);
			node.setMicroId(microcourse.getMicroId());
			node.setMicroName(microcourse.getMicroName());
			node.setMicroState(microcourse.getMicroState());
			node.setTime(microcourse.getTime());
			node.setTimeStr(microcourse.getTimeStr());
			node.setAccuracy(microcourse.getAccuracy());
			node.setExerciseId(microcourse.getExerciseId());
			list.add(node);
		}
		return list;
	}
	
	/**
	 * 生成微课作业，生成成功返回其id
	 * @param exercise
	 * @param relIds
	 */
	@RequestMapping("generateExerciseForMicro")
	@ResponseBody
	public JsonResult generateExerciseForMicro(String exerciseId, Long knowledgeId,String knowledgeName,Long subjectId,String subjectName) {
		JsonResult jsonResult = new JsonResult();
		Exercise dbExercise = this.exerciseService.getExerciseById(exerciseId);
		if(dbExercise != null){
			jsonResult.addDatas("exerciseId", dbExercise.getExerciseId());
			return jsonResult;
		}
		
		//生成练习
		Exercise exercise = new Exercise();
		exercise.setSubjectId(subjectId);
		exercise.setSubjectName(subjectName);
		exercise.setExerciseId(exerciseId);
		exercise.setRelIds(Arrays.asList(knowledgeId));
		exercise.setExerciseName(knowledgeName);
		exercise.setExerciseType((long) ExerciseType.KNOWLEDGE.value);
		exercise.setStatus(2);//非自主练习
		QuestionSelectQuery query = new QuestionSelectQuery();
		query.setKnowledgeIds(exercise.getRelIds());
		//TODO zfj 易中难 122找题目暂时忽略
		//query.setDiffLevel(exercise.getDifficultyLevel()); //取消难度系数，后期再恢复
		query.setQuestionNum(5);
		query.setSubjectId(exercise.getSubjectId());
		query.setIncludeSubjective(false);
		List<Long> questionIds = questionSelectRemoteService.queryRandomQuestionIds(query);
		if (CollectionUtils.isEmpty(questionIds)) {
			jsonResult.addDatas("exerciseId", null);
			return jsonResult;
		}

		User user = UserContext.user.get();
		exercise.setStudentId(user.getId()); 
		exercise.setSchoolId(user.getCurrentSchool().getId());
		exercise.setIsDeleted(false);
		List<QuestionDTO> questionDTOs = QuestionContext.findQuestions(questionIds);
		List<AnswerInfo> answerInfoList = AnswerUtils.virtualAnswerInfos(questionDTOs);
		this.exerciseService.saveExercise(exercise, answerInfoList);
		jsonResult.addDatas("exerciseId", exercise.getExerciseId());
		return jsonResult;
	}

}
