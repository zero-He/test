<?xml version="1.0" encoding="UTF-8" ?>   
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.strong.leke.homework.dao.mybatis.DoubtDao">

	<!-- 插入实体 -->
	<insert id="saveDoubt" parameterType="cn.strong.leke.homework.model.Doubt"
	useGeneratedKeys="true" keyProperty="doubtId">
		insert into HW_DOUBT(
		subjectId,
		doubtType,
		doubtTitle,
		doubtContent,
		homeworkDtlId,
		questionId,
		targetType,
		schoolId,
		schoolName,
		userName,
		bestExpainId,
		doubtAudio,
		duration,
		isDeleted,
		createdBy,
		createdOn,
		teacherId,
		resolved,
		explainTime,
		source,
		sourceId,
		sourceType,
		sourceName,
		materialId,
		materialNodeId,
		materialPathName,
		pressId,
		schoolStageId
		)
		values(
		#{subjectId},
		#{doubtType},
		#{doubtTitle},
		#{doubtContent},
		#{homeworkDtlId},
		#{questionId},
		#{targetType},
		#{schoolId},
		#{schoolName},
		#{userName},
		#{bestExpainId},
		#{doubtAudio},
		#{duration},
		#{isDeleted},
		#{createdBy},
		now(),
		#{teacherId},
		0,
		now(),
		#{source},
		#{sourceId},
		#{sourceType},
		#{sourceName},
		#{materialId},
		#{materialNodeId},
		#{materialPathName},
		#{pressId},
		#{schoolStageId}
		)
	</insert>

	<select id="getDetail" parameterType="cn.strong.leke.homework.model.DoubtDtl" resultType="cn.strong.leke.homework.model.DoubtDtl">
		select * from HW_DOUBT doubt where doubt.isDeleted = 0 and doubt.doubtId = #{doubtId} 
	</select>
	
	<update id="updateDetailExplainTime" parameterType="map">
		update HW_DOUBT set explainTime = now()
		<if test="askAgain != null">
			, askAgain = #{askAgain} 
		</if>
		where doubtId = #{doubtId}
	</update>
	
	<update id="updateSection" parameterType="cn.strong.leke.homework.model.Doubt">
		update HW_DOUBT set 
		materialId = #{materialId},
		materialNodeId = #{materialNodeId},
		materialPathName = #{materialPathName},
		pressId = #{pressId}
		where doubtId = #{doubtId}
	</update>
	
	<update id="deleteMySelfDoubt" parameterType="map">
		update HW_DOUBT set
		<if test="roleId==100">
			studentIsDeleted = 1,
		</if>
		<if test="roleId==101">
			teacherIsDeleted = 1,
		</if>
		isDeleted = isDeleted
		where doubtId in
		<foreach collection="doubtIds" item="doubtId" open="(" close=")" separator=",">
			#{doubtId}
		</foreach>
	</update>
	
	<update id="markMySelfDoubt" parameterType="map">
		update HW_DOUBT  set
		<if test="roleId==100">
			studentCollect = !studentCollect,
		</if>
		<if test="roleId==101">
			teacherCollect = !teacherCollect,
		</if>
		isDeleted = isDeleted
		where doubtId = #{doubtId}
	</update>
	
	<select id="getDoubt" parameterType="cn.strong.leke.homework.model.Doubt" resultType="cn.strong.leke.homework.model.Doubt">
		select * from HW_DOUBT doubt 
		where 
			doubt.isDeleted = 0 
			and doubt.createdBy = #{createdBy}
			and doubt.createdOn = now()
	</select>

	<select id="doubtList" parameterType="cn.strong.leke.homework.model.DoubtDtl" resultType="cn.strong.leke.homework.model.DoubtDtl" >
	
		select * from HW_DOUBT doubt where doubt.isDeleted = 0 and doubt.studentIsDeleted = 0 and doubt.createdBy = #{createdBy}
		
		<if test="doubtTitle != null and doubtTitle != ''">
			and (doubt.doubtTitle like CONCAT('%',#{doubtTitle},'%') or doubt.doubtContent like CONCAT('%',#{doubtTitle},'%'))
		</if>
		<if test="startTime != null and startTime != ''">
			and doubt.createdOn <![CDATA[ > ]]> #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and doubt.createdOn <![CDATA[ < ]]> #{endTime}
		</if>
		<if test="subjectId != null and subjectId != 0">
			and doubt.subjectId = #{subjectId}
		</if>
		<if test="resolved == false">
			and doubt.resolved  = 0 
		</if>
		<if test="resolved == true">
			and doubt.resolved = 1
		</if>
		<if test="subjects != null">
			and doubt.subjectId in
			<foreach collection="subjects" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="source != null and source != 0">
			and doubt.source = #{source}
		</if>
		<if test="sourceId != null and sourceId != 0">
			and doubt.sourceId = #{sourceId}
		</if>
		<if test="sourceType != null and sourceType != 0">
			and doubt.sourceType = #{sourceType}
		</if>
		<if test="studentCollect != null and studentCollect != 0">
			and doubt.studentCollect = #{studentCollect}
		</if>
		order by doubt.explainTime desc,doubt.doubtId desc
	</select>
	
	
	<select id="getTeacherDoubtl" parameterType="cn.strong.leke.homework.model.DoubtDtl" resultType="cn.strong.leke.homework.model.DoubtDtl" >
	
		select * from HW_DOUBT doubt where doubt.isDeleted = 0 and doubt.teacherIsDeleted = 0 and doubt.teacherId = #{teacherId}
		
		<if test="userName != null and userName != ''">
			and doubt.userName like concat('%',#{userName},'%')
		</if>
		<if test="doubtTitle != null and doubtTitle != ''">
			and (doubt.doubtTitle like CONCAT('%',#{doubtTitle},'%') or doubt.doubtContent like CONCAT('%',#{doubtTitle},'%'))
		</if>
		<if test="startTime != null and startTime != ''">
			and doubt.createdOn <![CDATA[ > ]]> #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and doubt.createdOn <![CDATA[ < ]]> #{endTime}
		</if>
		<if test="resolved == false">
			and doubt.resolved  = 0 
		</if>
		<if test="resolved == true">
			and doubt.resolved = 1
		</if>
		<if test="subjects != null">
			and doubt.subjectId in
			<foreach collection="subjects" item="s" open="(" close=")" separator=",">
				#{s}
			</foreach>
		</if>
		<if test="source != null and source != 0">
			and doubt.source = #{source}
		</if>		
		<if test="teacherCollect != null and teacherCollect != 0">
			and doubt.teacherCollect = #{teacherCollect}
		</if>
		order by doubt.explainTime desc, doubt.doubtId desc
	</select>
	
	<select id="getTeacherResolveDoubt" parameterType="long" resultType="int">
		select count(1) from HW_DOUBT doubt where doubt.isDeleted = 0 and doubt.teacherIsDeleted = 0 and doubt.teacherId = #{teacherId}
		and doubt.resolved  = 0
	</select>
	
	<select id="getStudentResolveDoubt" parameterType="long" resultType="int">
		select count(1) from HW_DOUBT doubt where doubt.isDeleted = 0 and doubt.studentIsDeleted = 0 and doubt.createdBy = #{createdBy}
		and doubt.resolved  = 0
	</select>
	
	<select id="isResolved" parameterType="long" resultType="int">
		select resolved from  HW_DOUBT where doubtId = #{doubtId}
	</select>
 
	<update id="resoveDoubt" parameterType="long" >
		update HW_DOUBT set resolved = 1 where doubtId = #{doubtId}
	</update>
	
	<select id="getResolveDoubtTotal" resultType="integer">
		<![CDATA[
		select count(*) from HW_DOUBT 
		where isDeleted = 0 
			and teacherId = #{teacherId}
			and createdOn >= DATE_FORMAT(NOW(),'%Y-%m-%d')
			and resolved = 0
		]]>
	</select>
</mapper>   
