package cn.strong.leke.homework.service.impl;

import java.math.BigDecimal;
import java.math.RoundingMode;

import static java.util.stream.Collectors.toList;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;

import cn.strong.leke.common.serialize.support.json.JsonUtils;
import cn.strong.leke.common.utils.CollectionUtils;
import cn.strong.leke.common.utils.DateUtils;
import cn.strong.leke.common.utils.ListUtils;
import cn.strong.leke.context.base.UserBaseContext;
import cn.strong.leke.context.paper.PaperContext;
import cn.strong.leke.context.user.cst.RoleCst;
import cn.strong.leke.core.business.incentive.DynamicHelper;
import cn.strong.leke.core.business.notice.NoticeHelper;
import cn.strong.leke.framework.mq.MessageSender;
import cn.strong.leke.framework.page.jdbc.Page;
import cn.strong.leke.homework.dao.mybatis.HomeworkDao;
import cn.strong.leke.homework.dao.mybatis.HomeworkDtlDao;
import cn.strong.leke.homework.model.ApiHwCount;
import cn.strong.leke.homework.model.ClassAddUserEvent;
import cn.strong.leke.homework.model.Homework;
import cn.strong.leke.homework.model.HomeworkDTO;
import cn.strong.leke.homework.model.HomeworkDtl;
import cn.strong.leke.homework.model.HomeworkDtlInfo;
import cn.strong.leke.homework.model.HomeworkForm;
import cn.strong.leke.homework.model.HomeworkQuery;
import cn.strong.leke.homework.model.HomeworkReviewInfo;
import cn.strong.leke.homework.model.HomeworkType;
import cn.strong.leke.homework.model.mongo.HomeworkProgress;
import cn.strong.leke.homework.model.mongo.HomeworkProgress.StudentTs;
import cn.strong.leke.homework.model.query.ApiHomeworkListQuery;
import cn.strong.leke.homework.model.query.ClassHomeworkQuery;
import cn.strong.leke.homework.model.query.HomeworkIncentiveQuery;
import cn.strong.leke.homework.service.HomeworkDtlService;
import cn.strong.leke.homework.service.HomeworkService;
import cn.strong.leke.homework.service.IHomeworkProgressService;
import cn.strong.leke.homework.util.HomeworkCst;
import cn.strong.leke.homework.util.HomeworkUtils;
import cn.strong.leke.homework.util.ScoreUtils;
import cn.strong.leke.model.BaseModelHelper;
import cn.strong.leke.model.base.Clazz;
import cn.strong.leke.model.base.Subject;
import cn.strong.leke.model.common.ClassTreeModel;
import cn.strong.leke.model.common.StuTreeModel;
import cn.strong.leke.model.incentive.DynamicInfo;
import cn.strong.leke.model.incentive.IncentiveTypes;
import cn.strong.leke.model.paper.PaperDTO;
import cn.strong.leke.model.user.User;
import cn.strong.leke.model.user.UserBase;
import cn.strong.leke.notice.model.todo.HwAssignEvent;
import cn.strong.leke.notice.model.todo.HwDtlInfo;
import cn.strong.leke.notice.model.todo.HwInvalidEvent;
import cn.strong.leke.notice.model.todo.HwModifyEvent;
import cn.strong.leke.notice.model.todo.TodoEvent;
import cn.strong.leke.remote.model.beike.HomeworkNoticeRemote;
import cn.strong.leke.remote.model.homework.HomeworkAssignRemote;
import cn.strong.leke.remote.model.homework.HomeworkDtlRemote;
import cn.strong.leke.remote.model.homework.HomeworkRemote;
import cn.strong.leke.remote.model.homework.VodHwAssignRemote;
import cn.strong.leke.remote.model.homework.VodHwAssignRemote.ResInfo;
import cn.strong.leke.remote.service.beike.IBeikeRemoteService;
import cn.strong.leke.remote.service.lesson.IKlassRemoteService;
import cn.strong.leke.tutor.model.course.ScheduleQuery;
import cn.strong.leke.tutor.model.course.ScheduleStat;

/**
 * 教师作业service
 * @author  basil
 * @created 2014-6-23 上午9:46:33
 * @since   v1.0.0
 */
@Service("homeworkService")
public class HomeworkServiceImpl implements HomeworkService {

	private static final Logger logger = LoggerFactory.getLogger(HomeworkServiceImpl.class);

	@Resource
	private HomeworkDao homeworkDao;
	@Resource
	private HomeworkDtlDao homeworkDtlDao;
	@Resource
	private HomeworkDtlService homeworkDtlService;
	@Resource
	private IHomeworkProgressService homeworkProgressService;
	@Resource
	private IBeikeRemoteService beikeRemoteService;
	@Resource
	private IKlassRemoteService klassRemoteService;
	@Resource
	private MessageSender paperArrangeTimesSender;
	@Resource
	private MessageService messageService;

	@Override
	public Homework getHomeworkById(Long homeworkId) {
		return homeworkDao.getHomeworkById(homeworkId);
	}

	@Override
	public List<HomeworkDTO> findHomeworkList(HomeworkQuery homework, Page page) {
		return homeworkDao.queryHomeworkList(homework, page);
	}
	@Override
	public List<HomeworkDTO> findDumpedHomeworkList(HomeworkQuery query, Page page) {
		return homeworkDao.findDumpedHomeworkList(query, page);
	}

	@Override
	public List<HomeworkDTO> findProvostHomeworkList(ClassHomeworkQuery query, Page page) {
		return homeworkDao.queryClassTeacherHomeworkList(query, page);
	}

	@Override
	public List<Long> saveFastAssignHomework(List<Long> classIds, List<Long> paperIds, Date closeTime, User user) {
		if (closeTime == null) {
			closeTime = DateUtils.addDays(new Date(), 3);
		}
		List<Clazz> clazzList = this.klassRemoteService.findClazzByClassIds(classIds);

		List<TodoEvent> events = Lists.newArrayList();
		List<Long> homeworkIds = Lists.newArrayList();
		for (Long paperId : paperIds) {
			PaperDTO paperDTO = PaperContext.getPaperDTO(paperId);
			Homework homework = new Homework();
			homework.setTeacherId(user.getId());
			homework.setTeacherName(user.getUserName());
			homework.setSchoolId(user.getCurrentSchool().getId());
			homework.setPaperId(paperDTO.getPaperId());
			homework.setSubjectId(paperDTO.getSubjectId());
			homework.setSubjectName(paperDTO.getSubjectName());
			homework.setSubjective(paperDTO.getSubjective());
			homework.setHomeworkName(paperDTO.getTitle());
			homework.setHomeworkType(HomeworkType.HOME.value);
			homework.setStartTime(new Date());
			homework.setCloseTime(closeTime);
			homework.setFinishNum(0);
			homework.setDelayNum(0);
			homework.setCorrectNum(0);
			homework.setCreatedBy(user.getId());
			homework.setCreatedOn(new Date());
			homework.setIsDeleted(false);
	
			for (Clazz clazz : clazzList) {
				List<Long> userIds = this.klassRemoteService.findStudentIdsByClassId(clazz.getClassId());
				List<UserBase> userBaseList = UserBaseContext.findUserBaseByUserId(userIds.toArray(new Long[0]));
				List<StuTreeModel> stuList = userBaseList.stream().map(userBase -> {
					StuTreeModel stu = new StuTreeModel();
					stu.setStuId(userBase.getId());
					stu.setStuName(userBase.getUserName());
					return stu;
				}).collect(toList());
	
				homework.setClassId(clazz.getClassId());
				homework.setClassType(clazz.getType());
				homework.setClassName(clazz.getClassName());
				homework.setTotalNum(stuList.size());
				homeworkDao.insertHomework(homework); //保存每个班级的教师作业	
				//保存学生作业，班级没有学生时不写入学生作业
				if (CollectionUtils.isNotEmpty(stuList)) {
					homeworkDtlService.saveHomeworkDtl(homework, stuList);
					//发送 布置作业待办集合（非随堂作业）
					if (homework.getHomeworkType() != HomeworkType.CLASS.value) {
						events.add(createHwAssignEvent(homework, stuList));
					}
				}
				homeworkIds.add(homework.getHomeworkId());
			}
		}
		//发送 布置作业待办
		NoticeHelper.todo(events);

		// 发送Paper消息
		logger.debug("send message to paper. " + Arrays.asList(paperIds));
		paperArrangeTimesSender.send(Arrays.asList(paperIds));
		return homeworkIds;
	}

	@Override
	public List<HomeworkRemote> saveHomework(HomeworkForm homeworkForm) {
		List<HomeworkRemote> homeworkRemoteList = new ArrayList<HomeworkRemote>();
		List<TodoEvent> events = new ArrayList<TodoEvent>();
		for (Long paperId : homeworkForm.getPaperIds()) {
			PaperDTO paperDTO = PaperContext.getPaperDTO(paperId);
			Homework homework = new Homework();
			homework.setTeacherId(homeworkForm.getTeacherId());
			homework.setTeacherName(homeworkForm.getTeacherName());
			homework.setSchoolId(homeworkForm.getSchoolId());
			homework.setPaperId(paperDTO.getPaperId());
			homework.setSubjectId(paperDTO.getSubjectId());
			homework.setSubjectName(paperDTO.getSubjectName());
			homework.setSubjective(paperDTO.getSubjective());
			homework.setPaperType(paperDTO.getPaperType());
			homework.setHomeworkName(paperDTO.getTitle());
			homework.setHomeworkType(homeworkForm.getHomeworkType());
			homework.setStartTime(homeworkForm.getStartTime());
			homework.setCloseTime(homeworkForm.getCloseTime());
			homework.setFinishNum(0);
			homework.setDelayNum(0);
			homework.setCorrectNum(0);
			homework.setCreatedBy(homeworkForm.getTeacherId());
			homework.setCreatedOn(new Date());
			homework.setIsDeleted(false);
			if (homework.getStartTime() == null) {
				homework.setStartTime(new Date());
			}

			List<ClassTreeModel> classList = JsonUtils.readList(homeworkForm.getClassJson(), ClassTreeModel.class);
			for (ClassTreeModel classDTO : classList) {
				if (CollectionUtils.isEmpty(classDTO.getStuList())) {
					List<Long> userIds = this.klassRemoteService.findStudentIdsByClassId(classDTO.getClassId());
					List<UserBase> userBaseList = UserBaseContext.findUserBaseByUserId(userIds.toArray(new Long[0]));
					List<StuTreeModel> stuList = new ArrayList<StuTreeModel>();
					for (UserBase userBase : userBaseList) {
						StuTreeModel stu = new StuTreeModel();
						stu.setStuId(userBase.getId());
						stu.setStuName(userBase.getUserName());
						stuList.add(stu);
					}
					classDTO.setStuList(stuList);
				}

				homework.setClassId(classDTO.getClassId());
				homework.setClassType(classDTO.getClassType().intValue());
				homework.setClassName(classDTO.getClassName());
				homework.setCourseSetId(classDTO.getCourseSetId());
				homework.setTotalNum(classDTO.getStuList().size());
				homeworkDao.insertHomework(homework); //保存每个班级的教师作业	
				//保存学生作业，班级没有学生时不写入学生作业
				if (CollectionUtils.isNotEmpty(classDTO.getStuList())) {
					homeworkDtlService.saveHomeworkDtl(homework, classDTO.getStuList());
					//发送 布置作业待办集合（非随堂作业）
					if (homework.getHomeworkType() != HomeworkType.CLASS.value) {
						events.add(createHwAssignEvent(homework, classDTO.getStuList()));
					}
				}

				// 老师作业对象
				HomeworkRemote homeworkRemote = HomeworkUtils.copy(HomeworkRemote.class, homework);
				// 学生作业对象
				List<HomeworkDtl> homeworkDtlList = this.homeworkDtlService
						.findHomeworkDtlListByHomeworkId(homework.getHomeworkId());
				homeworkRemote.setHomeworkDtlList(HomeworkUtils.copy(HomeworkDtlRemote.class, homeworkDtlList));
				homeworkRemoteList.add(homeworkRemote);
			}
		}
		//发送 布置作业待办
		NoticeHelper.todo(events);

		// 发送Paper消息
		logger.debug("send message to paper. " + Arrays.toString(homeworkForm.getPaperIds()));
		paperArrangeTimesSender.send(Arrays.asList(homeworkForm.getPaperIds()));
		return homeworkRemoteList;
	}

	/**
	 * 布置作业 发送待办
	 * @param homework
	 * @param homeworkAllStudentIds
	 */
	private HwAssignEvent createHwAssignEvent(Homework homework, List<StuTreeModel> homeworkAllStudentIds) {
		HwAssignEvent event = new HwAssignEvent();
		event.setTeacherId(homework.getTeacherId());
		event.setCourseSingleId(homework.getCourseSingleId());
		event.setHomeworkId(homework.getHomeworkId());
		event.setHomeworkName(homework.getHomeworkName());
		event.setStartTime(homework.getStartTime());
		event.setCloseTime(homework.getCloseTime());
		List<Long> studentIds = new ArrayList<Long>();
		for (StuTreeModel item : homeworkAllStudentIds) {
			if (!studentIds.contains(item.getStuId())) {
				studentIds.add(item.getStuId());
			}
		}
		event.setHomeworkType(homework.getHomeworkType());
		event.setStudentIds(studentIds);
		return event;
	}

	/**
	 * 根据作业信息生成通知对象
	 * @param homework
	 * @param homeworkDtlList
	 * @return
	 */
	private HomeworkNoticeRemote buildHomeworkNoticeRemote(Homework homework, List<HomeworkDtl> homeworkDtlList,
			HomeworkAssignRemote homeworkAssign) {
		HomeworkNoticeRemote homeworkNotice = new HomeworkNoticeRemote();
		homeworkNotice.setHomeworkId(homework.getHomeworkId());
		homeworkNotice.setTeacherId(homework.getTeacherId());
		homeworkNotice.setCourseSingleId(homework.getCourseSingleId());
		homeworkNotice.setHomeworkType(homework.getHomeworkType().longValue());
		homeworkNotice.setHomeworkName(homework.getHomeworkName());
		homeworkNotice.setSchoolId(homework.getSchoolId());
		homeworkNotice.setBeikePkgId(homeworkAssign.getBeikePkgId());
		return homeworkNotice;
	}

	@Override
	public void saveAssignHomework(List<HomeworkAssignRemote> homeworkAssignList) {
		List<Long> paperIds = new ArrayList<Long>();
		List<HomeworkRemote> homeworkRemoteList = new ArrayList<HomeworkRemote>();
		List<HomeworkNoticeRemote> homeworkNoticeRemoteList = new ArrayList<HomeworkNoticeRemote>();
		List<TodoEvent> events = new ArrayList<TodoEvent>();
		for (HomeworkAssignRemote homeworkAssign : homeworkAssignList) {
			List<Long> userIds = this.klassRemoteService.findStudentIdsByClassId(homeworkAssign.getClassId());
			List<UserBase> userBaseList = UserBaseContext.findUserBaseByUserId(userIds.toArray(new Long[0]));
			for (Long paperId : homeworkAssign.getPaperIds()) {
				PaperDTO paperDTO = PaperContext.getPaperDTO(paperId);
				paperIds.add(paperId);

				Homework homework = new Homework();
				homework.setTeacherId(homeworkAssign.getTeacherId());
				homework.setTeacherName(homeworkAssign.getTeacherName());
				homework.setPaperId(paperId);
				homework.setSubjectId(paperDTO.getSubjectId());
				homework.setSubjectName(paperDTO.getSubjectName());
				homework.setSubjective(paperDTO.getSubjective());
				homework.setPaperType(paperDTO.getPaperType());
				homework.setClassType(homeworkAssign.getClassType());
				homework.setClassId(homeworkAssign.getClassId());
				homework.setClassName(homeworkAssign.getClassName());
				homework.setCourseSingleId(homeworkAssign.getCourseSingleId());
				if (homework.getHomeworkName() == null) {
					homework.setHomeworkName(paperDTO.getTitle());
				} else {
					homework.setHomeworkName(homeworkAssign.getHomeworkName());
				}
				homework.setHomeworkType(homeworkAssign.getHomeworkType().intValue());
				homework.setStartTime(homeworkAssign.getStartTime());
				homework.setCloseTime(homeworkAssign.getCloseTime());
				homework.setSchoolId(homeworkAssign.getSchoolId());
				homework.setFinishNum(0);
				homework.setDelayNum(0);
				homework.setCorrectNum(0);
				homework.setCreatedBy(homeworkAssign.getTeacherId());
				homework.setCreatedOn(new Date());
				homework.setIsDeleted(false);
				if (homework.getStartTime() == null) {
					homework.setStartTime(new Date());
				}

				homework.setTotalNum(userIds.size());
				homeworkDao.insertHomework(homework);
				//保存学生作业
				if (!userIds.isEmpty()) {
					homeworkDtlService.saveHomeworkDtlForBind(homework, userBaseList);
				}
				saveHomeworkProgress(homework, userIds);
				// 老师作业对象
				HomeworkRemote homeworkRemote = HomeworkUtils.copy(HomeworkRemote.class, homework);
				// 学生作业对象
				List<HomeworkDtl> homeworkDtlList = this.homeworkDtlService
						.findHomeworkDtlListByHomeworkId(homework.getHomeworkId());
				homeworkRemote.setHomeworkDtlList(HomeworkUtils.copy(HomeworkDtlRemote.class, homeworkDtlList));
				homeworkRemoteList.add(homeworkRemote);
				homeworkNoticeRemoteList.add(this.buildHomeworkNoticeRemote(homework, homeworkDtlList, homeworkAssign));
				HwAssignEvent event = new HwAssignEvent();
				event.setHomeworkId(homework.getHomeworkId());
				event.setHomeworkName(homework.getHomeworkName());
				event.setHomeworkType(homework.getHomeworkType());
				event.setStartTime(homework.getStartTime());
				event.setCloseTime(homework.getCloseTime());
				event.setTeacherId(homework.getTeacherId());
				event.setCourseSingleId(homework.getCourseSingleId());
				event.setStudentIds(userIds);
				events.add(event);
			}
		}

		// 绑定单课的作业通知到备课系统
		this.beikeRemoteService.saveHomeworkNotice(homeworkNoticeRemoteList);
		// 发送Paper消息
		logger.debug("send message to paper. " + paperIds);
		paperArrangeTimesSender.send(paperIds);
		// 备课 作业 发送待办
		NoticeHelper.todo(events);
	}

	@Override
	public List<ResInfo> saveAssignHomework(VodHwAssignRemote assignRemote) {
		List<TodoEvent> events = new ArrayList<TodoEvent>();
		for (ResInfo resInfo : assignRemote.getResInfos()) {
			PaperDTO paperDTO = PaperContext.getPaperDTO(resInfo.getResId());
			Homework homework = new Homework();
			homework.setDutyMode(assignRemote.getDutyMode());
			homework.setTeacherId(assignRemote.getTeacherId());
			homework.setTeacherName(assignRemote.getTeacherName());
			homework.setPaperId(resInfo.getResId());
			homework.setSubjectId(paperDTO.getSubjectId());
			homework.setSubjectName(paperDTO.getSubjectName());
			homework.setPaperType(paperDTO.getPaperType());
			homework.setSubjective(paperDTO.getSubjective());
			homework.setClassType(Clazz.CLAZZ_VIRTUAL);
			homework.setClassId(assignRemote.getClassId());
			homework.setClassName(assignRemote.getClassName());
			homework.setHomeworkName(resInfo.getResName());
			homework.setHomeworkType(HomeworkType.VOD.value);
			homework.setStartTime(assignRemote.getStartTime());
			homework.setCloseTime(assignRemote.getCloseTime());
			homework.setSchoolId(assignRemote.getSchoolId());
			homework.setTotalNum(0);
			homework.setFinishNum(0);
			homework.setDelayNum(0);
			homework.setCorrectNum(0);
			BaseModelHelper.fillInsertProps(homework, assignRemote.getTeacherId());
			homeworkDao.insertHomework(homework);
			resInfo.setHomeworkId(homework.getHomeworkId());
			
			HwAssignEvent event = new HwAssignEvent();
			event.setHomeworkId(homework.getHomeworkId());
			event.setHomeworkName(homework.getHomeworkName());
			event.setHomeworkType(homework.getHomeworkType());
			event.setStartTime(homework.getStartTime());
			event.setCloseTime(homework.getCloseTime());
			event.setTeacherId(homework.getTeacherId());
			event.setCourseSingleId(homework.getCourseSingleId());
			event.setStudentIds(Collections.emptyList());
			events.add(event);

			this.saveHomeworkProgress(homework, Collections.emptyList());
		}

		// 发送Paper消息
		List<Long> paperIds = assignRemote.getResInfos().stream().map(ResInfo::getResId).collect(Collectors.toList());
		paperArrangeTimesSender.send(paperIds);
		// 备课 作业 发送待办
		NoticeHelper.todo(events);
		return assignRemote.getResInfos();
	}

	@Override
	public HomeworkDtl resolveStuVodHwWithTx(Long homeworkId, User user) {
		// 查询点播作业及衍生作业中有没有该学生
		HomeworkDtl homeworkDtl = this.homeworkDtlDao.getHomeworkDtlByParentIdAndStudentId(homeworkId, user.getId());
		if (homeworkDtl != null) {
			// 直接找到作业，立即返回
			return homeworkDtl;
		}
		Homework homework = this.homeworkDao.getHomeworkById(homeworkId);
		if (homework.getDutyMode() != 2) {
			// 如果作业没有设置为行政班老师批改，直接生成学生作业并返回
			return this.createStudentVodHomework(homework, user);
		} else {
			Clazz clazz = this.klassRemoteService.getDeptClazzByStudentId(user.getId());
			if (clazz == null) {
				// 学生没有行政班，按dutyMode == 1 处理
				return this.createStudentVodHomework(homework, user);
			}
			List<Long> teacherIds = this.klassRemoteService.findTeacherIdsByClassIdAndSubjectId(clazz.getClassId(),
					homework.getSubjectId());
			if (CollectionUtils.isEmpty(teacherIds)) {
				// 学生行政班没有设置老师，按dutyMode == 1 处理
				return this.createStudentVodHomework(homework, user);
			}
			Long teacherId = teacherIds.get(0);
			// 已经确定了学生行政班和老师，找出对应作业
			Homework homework2 = this.homeworkDao.getVodDerivedHomeworkByParentId(homework.getHomeworkId(),
					clazz.getClassId(), teacherId);
			if (homework2 == null) {
				// 如果没有找出行政班作业
				UserBase userBase = UserBaseContext.getUserBaseByUserId(teacherId);
				homework2 = this.derivedCreateTeacherVodHomework(homework, userBase, clazz, user);
			}
			// 根据衍生作业，创建学生点播作业
			return this.createStudentVodHomework(homework2, user);
		}
	}

	@Override
	public void createStuVodHwWithTx(List<Long> homeworkIds, User user) {
		if (CollectionUtils.isEmpty(homeworkIds)) {
			return;
		}
		for (Long homeworkId : homeworkIds) {
			this.resolveStuVodHwWithTx(homeworkId, user);
		}
	}
	
	private HomeworkDtl createStudentVodHomework(Homework homework, User user) {
		HomeworkDtl homeworkDtl = new HomeworkDtl();
		homeworkDtl.setHomeworkId(homework.getHomeworkId());
		homeworkDtl.setStudentId(user.getId());
		homeworkDtl.setStudentName(user.getUserName());
		homeworkDtl.setSubmitStatus(HomeworkCst.HOMEWORK_SUBMIT_STATUS_NOT);
		homeworkDtl.setSchoolId(homework.getSchoolId());
		homeworkDtl.setOrderTime(homework.getCloseTime());
		BaseModelHelper.fillInsertProps(homeworkDtl, user.getId());
		this.homeworkDtlDao.saveHomeworkDtl(homeworkDtl);
		this.homeworkDao.updateHomeworkTotalNum(homework.getHomeworkId());
		return homeworkDtl;
	}

	// 衍生创建一份新的点播作业。
	private Homework derivedCreateTeacherVodHomework(Homework homework, UserBase teacher, Clazz clazz, User student) {
		Homework homework2 = new Homework();
		homework2.setTeacherId(teacher.getId());
		homework2.setTeacherName(teacher.getUserName());
		homework2.setDutyMode(homework.getDutyMode());
		homework2.setParentId(homework.getHomeworkId());
		homework2.setPaperId(homework.getPaperId());
		homework2.setSubjectId(homework.getSubjectId());
		homework2.setSubjectName(homework.getSubjectName());
		homework2.setSubjective(homework.getSubjective());
		homework2.setPaperType(homework.getPaperType());
		homework2.setClassType(clazz.getType());
		homework2.setClassId(clazz.getClassId());
		homework2.setClassName(clazz.getClassName());
		homework2.setHomeworkName(homework.getHomeworkName());
		homework2.setHomeworkType(homework.getHomeworkType());
		homework2.setStartTime(homework.getStartTime());
		homework2.setCloseTime(homework.getCloseTime());
		homework2.setSchoolId(homework.getSchoolId());
		homework2.setTotalNum(0);
		homework2.setFinishNum(0);
		homework2.setDelayNum(0);
		homework2.setCorrectNum(0);
		BaseModelHelper.fillInsertProps(homework2, homework.getTeacherId());
		this.homeworkDao.insertHomework(homework2);
		return homework2;
	}

	public void saveCourseSetUserMQ(ClassAddUserEvent event) {
		List<UserBase> users = UserBaseContext.findUserBaseByUserId(event.getUserIds().toArray(new Long[0]));
		for (Long classId : event.getClassIds()) {
			List<Homework> homeworkList = this.homeworkDao.findHomeworkByClassId(classId);
			for (Homework homework : homeworkList) {
				for (UserBase user : users) {
					HomeworkDtl homeworkDtl = this.homeworkDtlDao
							.getHomeworkDtlByHomeworkIdAndStudentId(homework.getHomeworkId(), user.getId());
					if (homeworkDtl == null) {
						homeworkDtl = new HomeworkDtl();
						homeworkDtl.setHomeworkId(homework.getHomeworkId());
						homeworkDtl.setStudentId(user.getId());
						homeworkDtl.setStudentName(user.getUserName());
						homeworkDtl.setSubmitStatus(HomeworkCst.HOMEWORK_SUBMIT_STATUS_NOT);
						homeworkDtl.setSchoolId(homework.getSchoolId());
						homeworkDtl.setOrderTime(homework.getCloseTime());
						homeworkDtl.setIsDeleted(false);
						homeworkDtl.setCreatedBy(homework.getCreatedBy());
						homeworkDtl.setCreatedOn(new Date());
						this.homeworkDtlDao.saveHomeworkDtl(homeworkDtl);
					}
				}
				this.homeworkDao.updateHomeworkTotalNum(homework.getHomeworkId());
			}
		}
	}

	@Override
	public HomeworkDtl createStuBeikeHwWithTx(Long homeworkId, User user) {
		HomeworkDtl homeworkDtl = this.homeworkDtlDao.getHomeworkDtlByHomeworkIdAndStudentId(homeworkId, user.getId());
		if (homeworkDtl != null) {
			return homeworkDtl;
		}
		Homework homework = this.homeworkDao.getHomeworkById(homeworkId);
		boolean inClass = this.klassRemoteService.checkStudentIdInClass(user.getId(), homework.getClassId());
		if (!inClass) {
			return null;
		}
		homeworkDtl = new HomeworkDtl();
		homeworkDtl.setHomeworkId(homework.getHomeworkId());
		homeworkDtl.setStudentId(user.getId());
		homeworkDtl.setStudentName(user.getUserName());
		homeworkDtl.setSubmitStatus(HomeworkCst.HOMEWORK_SUBMIT_STATUS_NOT);
		homeworkDtl.setSchoolId(homework.getSchoolId());
		homeworkDtl.setOrderTime(homework.getCloseTime());
		BaseModelHelper.fillInsertProps(homeworkDtl, user.getId());
		this.homeworkDtlDao.saveHomeworkDtl(homeworkDtl);
		this.homeworkDao.updateHomeworkTotalNum(homework.getHomeworkId());
		return homeworkDtl;
	}

	@Override
	public void updateHomeworkTimeByCourseSingle(Long courseSingleId, Date startTime, Date endTime) {
		List<Homework> homeworkList = this.homeworkDao.findHomeworkByCourseSingleId(courseSingleId);
		homeworkList.stream().map(homework -> {
			if (HomeworkType.PREPARE.value == homework.getHomeworkType()) {
				homework.setCloseTime(startTime);
			} else if (HomeworkType.CLASS.value == homework.getHomeworkType()) {
				homework.setStartTime(startTime);
				homework.setCloseTime(endTime);
			} else if (HomeworkType.HOME.value == homework.getHomeworkType()) {
				homework.setStartTime(endTime);
			}
			homeworkDao.updateHomeworkDate(homework.getHomeworkId(), homework.getStartTime(), homework.getCloseTime());
			homeworkDtlDao.updateHomeworkDtlOrderTime(homework.getHomeworkId(), homework.getCloseTime());
			HwModifyEvent event = new HwModifyEvent();
			event.setHomeworkId(homework.getHomeworkId());
			event.setStartTime(homework.getStartTime());
			event.setCloseTime(homework.getCloseTime());
			return event;
		}).collect(Collectors.toList()).forEach(NoticeHelper::todo);
	}

	@Override
	public List<ApiHwCount> getHwByMonth(Long teacherId, String month) {
		Date headTime = DateUtils.parseDate(month, "yyyy-MM");
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(headTime);
		calendar.add(Calendar.MONTH, 1);
		Date tailTime = calendar.getTime();
		return homeworkDao.queryHwByMonth(teacherId, headTime, tailTime);
	}

	@Deprecated
	@Override
	public List<Homework> getHwByDay(Long teacherId, String day) {
		Date headTime = DateUtils.parseDate(day, DateUtils.SHORT_DATE_PATTERN);
		Date tailTime = DateUtils.addDays(headTime, 1);
		return homeworkDao.getHwByDay(teacherId, headTime, tailTime);
	}
	
	/**
	 * 查询老师作业
	 * @param query
	 * @return
	 */
	public List<Homework> findTeacherHomework(ApiHomeworkListQuery query){
		return this.homeworkDao.findTeacherHomework(query);
	}
	
	
	/**
	 * 统计老师作业数，待批改和待复批数
	 * @param teacherId
	 * @return
	 */
	@Override
	public Map<String, Long> findTeacherHomeworkInfoTotal(Long teacherId)
	{
		return this.homeworkDao.findTeacherHomeworkInfoTotal(teacherId);
	}
	
	
	@Override
	public List<Homework> getHwByCourseSingleId(Long teacherId, Long courseSingleId) {
		return this.homeworkDao.getHwByCourseSingleId(teacherId, courseSingleId);
	}

	@Override
	public List<Homework> getHwPageByCourseSingleId(Long teacherId, String homeworkName, Integer homeworkType,
			Page page) {
		return this.homeworkDao.getHwPageByCourseSingleId(teacherId, homeworkName, homeworkType, page);
	}

	@Override
	@Deprecated
	public List<Homework> getHwByCourseSingleId2(Long teacherId, Long courseSingleId) {
		return this.homeworkDao.getHwByCourseSingleId2(teacherId, courseSingleId);
	}

	@Override
	public List<ApiHwCount> queryHwStuMonth(Long studentId, String month) {
		Date headTime = DateUtils.parseDate(month, "yyyy-MM");
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(headTime);
		calendar.add(Calendar.MONTH, 1);
		Date tailTime = calendar.getTime();
		return homeworkDao.queryHwStuMonth(studentId, headTime, tailTime);
	}

	@Override
	public List<HomeworkDTO> queryClassTeacherHomeworkList(ClassHomeworkQuery query, Page page) {
		return homeworkDao.queryClassTeacherHomeworkList(query, page);
	}

	@Override
	public void updateHomeworkDate(Long homeworkId, Date startTime, Date closeTime) {
		homeworkDao.updateHomeworkDate(homeworkId, startTime, closeTime);
		homeworkDtlDao.updateHomeworkDtlOrderTime(homeworkId, closeTime);
		//作业修改，发送待办
		HwModifyEvent event = new HwModifyEvent();
		event.setHomeworkId(homeworkId);
		event.setStartTime(startTime);
		event.setCloseTime(closeTime);
		NoticeHelper.todo(event);
	}

	@Override
	public void updateHomeworkInvalid(Long homeworkId, Long teacherId) {
		homeworkDao.updateHomeworkInvalid(homeworkId, teacherId);
		//作废作业，发送待办取消相关的待办信息
		HwInvalidEvent event = new HwInvalidEvent();
		event.setHomeworkId(homeworkId);
		NoticeHelper.todo(event);
		//发送作废提醒
		List<HomeworkDtl> homeworkDtls = homeworkDtlDao.findHomeworkDtlListByHomeworkId(homeworkId);
		if (!homeworkDtls.isEmpty()) {
			Homework homework = homeworkDao.getHomeworkById(homeworkId);
			List<Long> userIds = homeworkDtls.stream().map(s -> s.getStudentId()).collect(Collectors.toList());
			messageService.sendInvalidLetterMessage(userIds, homework.getHomeworkName());
		}
	}

	@Override
	public List<Long> findPaperIdsByHomeworkIds(List<Long> homeworkIds) {
		return this.homeworkDao.findPaperIdsByHomeworkIds(homeworkIds);
	}

	@Override
	public List<HwAssignEvent> findHwAssignEventsByCourseSingleId(Long courseSingleId) {
		return this.homeworkDao.findHwAssignEventsByCourseSingleId(courseSingleId);
	}

	@Override
	public List<ScheduleStat> findHomeworkScheduleByQuery(ScheduleQuery query) {
		return this.homeworkDao.findHomeworkScheduleByQuery(query);
	}

	@Override
	public List<Map<String, Object>> getCorrectHomeworks(Long teacherId, Date startTime) {
		return homeworkDao.getCorrectHomeworks(teacherId, startTime);
	}

	@Override
	public Integer getReCorrectNum(HomeworkQuery query) {
		return homeworkDao.getReCorrectNum(query);
	}

	@Override
	public List<Map<String, Object>> queryReCorrectHomeworkList(HomeworkQuery query, Page page) {
		return homeworkDao.queryReCorrectHomeworkList(query, page);
	}

	@Override
	public Integer saveOpenAnswer(Long homeworkId, Long teacherId) {
		Integer result = homeworkDao.saveOpenAnswer(homeworkId, teacherId);
		Homework homework = homeworkDao.getHomeworkById(homeworkId);
		if (homework.getStartTime().before(new Date())) {
			List<HomeworkDtl> homeworkDtls = homeworkDtlService.findHomeworkDtlListByHomeworkId(homeworkId);
			if (!homeworkDtls.isEmpty()) {
				List<Long> userIds = homeworkDtls.stream().map(s -> s.getStudentId()).collect(Collectors.toList());
				messageService.sendOpenAnswerLetterMessage(userIds, homework.getHomeworkName());
			}
		}
		return result;
	}

	@Override
	public Integer saveSelfCheck(Long homeworkId, Long teacherId) {
		homeworkDao.saveSelfCheck(homeworkId, teacherId);
		Integer result = homeworkDtlDao.updateBugFixStageRevised(homeworkId, teacherId);
		//发送待办消息
		Homework homework = homeworkDao.getHomeworkById(homeworkId);
		List<Map<String, Long>> maps = homeworkDtlService.findSubmitHomeworkDtls(homeworkId);
		if (!maps.isEmpty()) {
			String homeworkName = homework.getHomeworkName();
			//消息提醒
			List<Long> userIds = maps.stream().map(s -> {
				return s.get("studentId");
			}).collect(Collectors.toList());
			messageService.sendSelfCheckLetterMessage(userIds, homeworkName);
			//待办
			List<HwDtlInfo> hwDtlInfos = maps.stream().map(s -> {
				HwDtlInfo hwDtlInfo = new HwDtlInfo();
				hwDtlInfo.setHomeworkDtlId(s.get("homeworkDtlId"));
				hwDtlInfo.setStudentId(s.get("studentId"));
				return hwDtlInfo;
			}).collect(Collectors.toList());
			messageService.sendSelfCheckTodoMessage(hwDtlInfos, homeworkId, teacherId, homeworkName);
		}
		return result;
	}

	/**
	 *
	 * 描述:添加作业动态初始化记录
	 *
	 * @author raolei
	 * @created 2016年3月29日 下午2:00:46
	 * @since v1.0.0
	 * @param homework
	 * @param userIds
	 * @return void
	 */
	private void saveHomeworkProgress(Homework homework, List<Long> userIds) {
		HomeworkProgress record = new HomeworkProgress();
		record.setHomeworkId(homework.getHomeworkId());
		record.setStartTime(homework.getStartTime());
		record.setCloseTime(homework.getCloseTime());

		List<StudentTs> unfinished = ListUtils.map(userIds, s -> {
			StudentTs st = new StudentTs();
			st.setStudentId(s);
			st.setTs(new Date(0));
			st.setUsed(0);
			return st;
		});
		record.setUnfinished(unfinished);
		record.setTotalNum(unfinished.size());
		homeworkProgressService.insert(record);
	}

	@Override
	public void updateHomeworkInvalid(Long homeworkId) {
		updateHomeworkInvalid(homeworkId, null);
	}

	@Override
	public List<Map<String, Object>> findHomeworkByPaperId(Long paperId, Long schoolId) {
		return this.homeworkDao.findHomeworkByPaperId(paperId, schoolId);
	}

	@Override
	public List<Subject> findOrganClassSubject(Long classId) {
		return this.homeworkDao.findOrganClassSubject(classId);
	}

	@Override
	public void delHomework(List<Long> homeworkIds,Long teacherId) {
		this.homeworkDao.delHomework(homeworkIds,teacherId);
		
	}

	@Override
	public void execTeacherHwIncentvie() {
		HomeworkIncentiveQuery query = buildQuery();
		while (true) {
			List<Homework> list = this.homeworkDao.findHwCorrectInfo(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkId());
			}
			for (Homework homework : list) {
				if(homework.getFinishNum().equals(0)){
					continue;
				}
				//批改
				correctHwIncentive(homework);
			}
		}
		query.setFlagId(0L);
		while (true) {
			List<HomeworkReviewInfo> list = this.homeworkDao.findHwReviewInfo(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkId());
			}
			for (HomeworkReviewInfo homework : list) {
				//复批
				DynamicHelper.publish(builReviewHwDynamicInfo(homework));
			}
		}
	}
	
	
	private HomeworkIncentiveQuery buildQuery(){
		Date curDate = new Date();
		curDate =DateUtils.parseDate(DateUtils.formatDate(curDate));
		Date start = DateUtils.addDays(curDate,-8);
		Date end = DateUtils.addDays(start,1);
		HomeworkIncentiveQuery query = new HomeworkIncentiveQuery();
		query.setEnd(end);
		query.setStart(start);
		query.setFlagId(0L);
		query.setLimit(10000L);
		return query;
	}
	

	@Override
	public void execStudentHwIncentvie() {
		HomeworkIncentiveQuery query = buildQuery();
		//待订正
		while (true) {
			List<HomeworkDtlInfo> list = this.homeworkDtlDao.findBugfixHomeworkDtl(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkDtlId());
			}
			for (HomeworkDtlInfo hwInfo : list) {
				DynamicInfo dynamicInfo = new DynamicInfo();
				dynamicInfo.setTypeId(IncentiveTypes.STUDENT.HW_NO_BUGFIX);
				dynamicInfo.setTitle(hwInfo.getHomeworkName());
				dynamicInfo.setUserId(hwInfo.getStudentId());
				dynamicInfo.setUserName(hwInfo.getStudentName());
				dynamicInfo.setRoleId(RoleCst.STUDENT);
				dynamicInfo.setSchoolId(hwInfo.getSchoolId());
				DynamicHelper.publish(dynamicInfo);
			}
		}
		//未完成
		query.setFlagId(0L);
		while (true) {
			List<HomeworkDtlInfo> list = this.homeworkDtlDao.findToFinishHomeworkDtl(query);
			if(list.size() == 0){
				break;
			}else{
				query.setFlagId(list.get(list.size() -1).getHomeworkDtlId());
			}
			for (HomeworkDtlInfo hwInfo : list) {
				DynamicInfo dynamicInfo = new DynamicInfo();
				dynamicInfo.setTypeId(IncentiveTypes.STUDENT.HW_NO_SUBMIT);
				dynamicInfo.setTitle(hwInfo.getHomeworkName());
				dynamicInfo.setUserId(hwInfo.getStudentId());
				dynamicInfo.setUserName(hwInfo.getStudentName());
				dynamicInfo.setRoleId(RoleCst.STUDENT);
				dynamicInfo.setSchoolId(hwInfo.getSchoolId());
				DynamicHelper.publish(dynamicInfo);
			}
		}
	}
	
	/**
	 * 老师作业批改率的激励
	 * @param homework
	 */
	private void correctHwIncentive(Homework homework) {
		BigDecimal correctRate = diviDecimal(BigDecimal.valueOf(homework.getCorrectNum()),
				BigDecimal.valueOf(homework.getFinishNum()));
		Long typeId = ScoreUtils.getTypeIdByRate(correctRate);
		if (typeId != null) {
			DynamicInfo dynamicInfo = new DynamicInfo();
			dynamicInfo.setTypeId(typeId);//作业批改激励
			dynamicInfo.setTitle(homework.getHomeworkName());
			dynamicInfo.setUserId(homework.getTeacherId());
			dynamicInfo.setUserName(homework.getTeacherName());
			dynamicInfo.setRoleId(RoleCst.TEACHER);
			dynamicInfo.setSchoolId(homework.getSchoolId());
			DynamicHelper.publish(dynamicInfo);
		}
	}
	private DynamicInfo builReviewHwDynamicInfo(HomeworkReviewInfo homework){
		DynamicInfo dynamicInfo = new DynamicInfo();
		if(homework.getBugfixStage() == 2){
			dynamicInfo.setTypeId(IncentiveTypes.TEACHER.HW_NO_REVIEW_WORK); 
		}else if(homework.getReviewTime() != null) {
			dynamicInfo.setTypeId(IncentiveTypes.TEACHER.HW_REVIEW_WORK); 
		}
		dynamicInfo.setTitle(homework.getHomeworkName());
		dynamicInfo.setUserId(homework.getTeacherId());
		dynamicInfo.setUserName(homework.getTeacherName());
		dynamicInfo.setRoleId(RoleCst.TEACHER);
		dynamicInfo.setSchoolId(homework.getSchoolId());
		return dynamicInfo;
	}
	
	private BigDecimal diviDecimal(BigDecimal a,BigDecimal b){
		if(b==null){
			return BigDecimal.valueOf(0);
		}
		return a.divide(b,2,RoundingMode.HALF_UP);
	}

	@Override
	public void recoverHomework(List<Long> homeworkIds,Long teacherId) {
		this.homeworkDao.recoverHomework(homeworkIds,teacherId);		
	}

	@Override
	public Map<String, Long> findStuHomeworkInfoTotal(Long studentId,Long subjectId) {
		return this.homeworkDao.findStuHomeworkInfoTotal(studentId,subjectId);
	}
}
